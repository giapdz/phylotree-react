[{"D:\\app test\\phylotree-react\\src\\index.js":"1","D:\\app test\\phylotree-react\\src\\reportWebVitals.js":"2","D:\\app test\\phylotree-react\\src\\App.js":"3","D:\\app test\\phylotree-react\\src\\components\\phylotree.jsx":"4","D:\\app test\\phylotree-react\\src\\components\\branch.jsx":"5","D:\\app test\\phylotree-react\\src\\components\\PhylotreeApplication.jsx":"6","D:\\app test\\phylotree-react\\src\\components\\tooltip_container.jsx":"7","D:\\app test\\phylotree-react\\src\\components\\text_width.jsx":"8","D:\\app test\\phylotree-react\\src\\components\\svg.jsx":"9"},{"size":477,"mtime":1632238136116,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1630319358711,"results":"12","hashOfConfig":"11"},{"size":8425,"mtime":1633024691476,"results":"13","hashOfConfig":"11"},{"size":9642,"mtime":1633031667467,"results":"14","hashOfConfig":"11"},{"size":15915,"mtime":1633026768329,"results":"15","hashOfConfig":"11"},{"size":12160,"mtime":1633026937144,"results":"16","hashOfConfig":"11"},{"size":437,"mtime":1633017533114,"results":"17","hashOfConfig":"11"},{"size":178,"mtime":1633017524089,"results":"18","hashOfConfig":"11"},{"size":680,"mtime":1633017520490,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"swo2ah",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\app test\\phylotree-react\\src\\index.js",[],["40","41"],"D:\\app test\\phylotree-react\\src\\reportWebVitals.js",[],"D:\\app test\\phylotree-react\\src\\App.js",[],"D:\\app test\\phylotree-react\\src\\components\\phylotree.jsx",[],"D:\\app test\\phylotree-react\\src\\components\\branch.jsx",[],"D:\\app test\\phylotree-react\\src\\components\\PhylotreeApplication.jsx",["42","43","44","45","46"],"import React, {Component} from \"react\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport RBButton from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { \r\n  faArrowLeft, faArrowUp, faArrowDown, faArrowRight,\r\n  faSortAmountUp, faAlignRight, faAlignLeft,faRedo, faImage\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport showLabel from \"./styles/show_label.png\"\r\nimport showLength from \"./styles/icon_length.png\"\r\nimport Phylotree from \"./phylotree\";\r\nimport TooltipContainer from \"./tooltip_container\";\r\nimport \"./styles/phylotree.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nconst saveSvgAsPng = require('save-svg-as-png')\r\n\r\nconst imageOptions = {\r\n  scale: 5,\r\n  encoderOptions: 1,\r\n  backgroundColor: 'white',\r\n}\r\n\r\nfunction Button(props) {\r\n  return (<OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>\r\n      {props.title}\r\n    </Tooltip>}\r\n  >\r\n    <RBButton\r\n      variant=\"secondary\"\r\n      {...props}\r\n    >\r\n      {props.children}\r\n    </RBButton>\r\n  </OverlayTrigger>);\r\n}\r\nfunction Reload(props) {\r\n  return (\r\n    <Button\r\n    style={{fontSize: 10}}\r\n    title=\"Reload tree\"\r\n    {...props}\r\n    >\r\n      <FontAwesomeIcon icon={faRedo} size=\"lg\" />\r\n    </Button>\r\n  )\r\n}\r\nfunction HorizontalExpansionButton(props) {\r\n  return (<Button\r\n    style={{ fontSize: 10 }}\r\n    title=\"Expand horizontally\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faArrowLeft} />\r\n    <FontAwesomeIcon key={2} icon={faArrowRight} />\r\n  </Button>);\r\n}\r\n\r\nfunction HorizontalCompressionButton(props) {\r\n  return (<Button\r\n    style={{ fontSize: 10 }}\r\n    title=\"Compress horizontally\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faArrowRight} />\r\n    <FontAwesomeIcon key={2} icon={faArrowLeft} />\r\n  </Button>);\r\n}\r\n\r\nfunction VerticalExpansionButton(props) {\r\n  return (<Button\r\n    style={{fontSize: 10, display: \"flex\", flexDirection: \"column\"}}\r\n    title=\"Expand vertically\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faArrowUp} />\r\n    <FontAwesomeIcon key={2} icon={faArrowDown} />\r\n  </Button>);\r\n}\r\n\r\nfunction VerticalCompressionButton(props) {\r\n  return (<Button\r\n    style={{fontSize: 10, display: \"flex\", flexDirection: \"column\"}}\r\n    title=\"Compress vertically\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faArrowDown} />\r\n    <FontAwesomeIcon key={2} icon={faArrowUp} />\r\n  </Button>);\r\n}\r\n\r\n\r\nfunction AscendingSortButton(props) {\r\n  return (<Button\r\n    title=\"Sort in ascending order\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faSortAmountUp} flip=\"vertical\"/>\r\n  </Button>);\r\n}\r\n\r\n\r\nfunction DescendingSortButton(props) {\r\n  return (<Button\r\n    title=\"Sort in descending order\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faSortAmountUp}/>\r\n  </Button>);\r\n}\r\n\r\n\r\nfunction AlignTipsRightButton(props) {\r\n  return (<Button\r\n    title=\"Align tips to right\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faAlignRight}/>\r\n  </Button>);\r\n}\r\n\r\n\r\nfunction AlignTipsLeftButton(props) {\r\n  return (<Button\r\n    title=\"Align tips to left\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faAlignLeft}/>\r\n  </Button>);\r\n}\r\nfunction DownloadImagetButton(props) {\r\n  return (<Button\r\n    title=\"Save image\"\r\n    {...props}\r\n  >\r\n    <FontAwesomeIcon key={1} icon={faImage} flip=\"vertical\"/>\r\n  </Button>);\r\n}\r\n\r\nfunction TooltipContents(props) {\r\n  return  (<TooltipContainer \r\n    tooltip_width={10}\r\n    tooltip_height={50}\r\n    \r\n    {...props}\r\n  >\r\n    <rect\r\n      x={0}\r\n      y={0}\r\n      width={180}\r\n      height={20}\r\n      \r\n      fill='bisque'\r\n    />\r\n    <text\r\n      x={90}\r\n      y={15}\r\n      fill=\"cadetblue\"\r\n      textAnchor=\"middle\"\r\n    >\r\n     Length:  {props.data.attribute}\r\n    </text>\r\n  </TooltipContainer>) ;\r\n}\r\n\r\n\r\nclass PhylotreeApplication extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tree: null,\r\n      width: props.width,\r\n      height: props.height,\r\n      sort: null,\r\n      reroot:null,\r\n      internal: false,\r\n      newick: props.newick,\r\n      support: props.support,\r\n      nodeName:'',\r\n      showlabel: true,\r\n    };\r\n    this.baseState = this.state;\r\n    \r\n  }\r\n  // useEffect(()=>{\r\n  //   let l=0;\r\n  //   for(let i of newick) {\r\n  //     if(i===\",\") l++;\r\n  //   }\r\n  //   if(l<20) {\r\n  //   this.setState({height: 640})\r\n  //   this.setState({width: 640})\r\n  //   }\r\n  //   else if(l<50 && l>=20) {\r\n  //     this.setState({height: l*20})\r\n  //   this.setState({width: 640})\r\n    \r\n  //   }\r\n  //   else {\r\n  //     this.setState({height: l*10})\r\n  //   this.setState({width: l*10})\r\n    \r\n  //   }\r\n  // }) \r\n    // let l=0;\r\n    // for(let i of this.state.newick) {\r\n    //   if(i===\",\") l++;\r\n    // }\r\n    // if(l<20) {\r\n    // this.setState({height: 640})\r\n    // this.setState({width: 640})\r\n    // }\r\n    // else if(l<50 && l>=20) {\r\n    //   this.setState({height: l*20})\r\n    // this.setState({width: 640})\r\n    // this.setState({textsize: 6})\r\n    // }\r\n    // else {\r\n    //   this.setState({height: l*10})\r\n    // this.setState({width: l*10})\r\n    // this.setState({textsize: 6})\r\n    // }\r\n  \r\n  toggleDimension =(dimension, direction) => {\r\n    const new_dimension = this.state[dimension] +\r\n      (direction === \"expand\" ? 100 : -100),\r\n      new_state = {};\r\n    new_state[dimension] = new_dimension;\r\n    this.setState(new_state);\r\n    console.log([dimension])\r\n  }\r\n  handleSort= (direction) => {\r\n    this.setState({sort: direction});\r\n  }\r\n  alignTips = (direction) => {\r\n    this.setState({alignTips: direction});\r\n  }\r\n  myChangeHandler = (event) => {\r\n    this.setState({nodeName: event.target.value});\r\n    \r\n  }\r\n  \r\n labelStyler =(branch) => {\r\n      var rx = new RegExp (this.state.nodeName,\"i\");\r\n      const identifier = branch.name.search(rx)\r\n      if(this.state.nodeName !== '') {\r\n      const  fill = identifier!== -1 ? 'red' : 'black'\r\n      return { fill };\r\n      }\r\n    }\r\n   handleClick = () => {\r\n      saveSvgAsPng.saveSvgAsPng(document.getElementById('svg-chart'), 'shapes.png', imageOptions);\r\n    }\r\n   openDropdown= (props) =>{\r\n      return ( \r\n        <div class=\"dropdown-menu\" role=\"menu\"\r\n        style= {{...props}}\r\n        >      <a class=\"dropdown-item\" tabindex=\"-1\" onClick={()=> {this.setState({reroot: props.node});\r\n              }}>Reroot on this node</a>\r\n               <div class=\"dropdown-divider\"></div>\r\n               <a class=\"dropdown-item\">Swap on this subtree</a>\r\n               <a class=\"dropdown-item\" >Flip on this subtree</a>\r\n             </div> \r\n             \r\n      )\r\n    }\r\n    render() {\r\n    const { padding } = this.props;\r\n    const { width, height } = this.state;\r\n    return (<div class=\"container\" >\r\n      <h1>React Phylotree</h1>\r\n      <div style={{display: \"inline-block\",  width:800}} >\r\n        <div>\r\n        <ButtonGroup >\r\n          <Reload\r\n          onClick={() => {\r\n            this.setState(this.baseState)}}\r\n          />\r\n          <HorizontalExpansionButton\r\n            onClick={()=>this.toggleDimension(\"width\", \"expand\")}\r\n          />\r\n          <HorizontalCompressionButton\r\n            onClick={()=>this.toggleDimension(\"width\", \"compress\")}\r\n          />\r\n          <VerticalExpansionButton\r\n            onClick={()=>this.toggleDimension(\"height\", \"expand\")}\r\n          />\r\n          <VerticalCompressionButton\r\n            onClick={()=>this.toggleDimension(\"height\", \"compress\")}\r\n          />\r\n          <AscendingSortButton\r\n            onClick={()=>this.handleSort(\"ascending\")}\r\n          />\r\n          <DescendingSortButton\r\n            onClick={()=>this.handleSort(\"descending\")}\r\n          />\r\n          <AlignTipsLeftButton\r\n            onClick={()=>this.alignTips(\"left\")}\r\n          />\r\n          <AlignTipsRightButton\r\n            onClick={()=>this.alignTips(\"right\")}\r\n          />\r\n          <Button\r\n          style={{fontSize: 10, width: 40}}\r\n          title=\"Toggle the display of taxa names\"\r\n          onClick={()=>this.setState({showlabel: !this.state.showlabel})}\r\n          >\r\n          <img src={showLabel} width= \"18\" />\r\n          </Button>\r\n          <Button\r\n          style={{fontSize: 10, width:40}}\r\n          title=\"Toggle the display of branch lengths\"\r\n          onClick={()=>this.setState({attribute: !this.state.attribute})}\r\n          >\r\n          <img src={showLength} width= \"20\" />\r\n          </Button>\r\n          <DownloadImagetButton onClick={this.handleClick} />\r\n        </ButtonGroup>\r\n        \r\n        <form style={{display: \"inline-block\", float: \"right\"}}>\r\n      <input\r\n      type='text'\r\n      name='find node'\r\n      placeholder='Search tree'\r\n      style={{height:40, textAlign:\"center\"}}\r\n      onChange={this.myChangeHandler}\r\n      />\r\n    </form>\r\n        \r\n        <div class=\"row align-items-start\" style={{width: 470}} >\r\n        {\r\n          (this.state.support.split('/')[0]) ?\r\n          (<div class=\"col\">\r\n          <input\r\n            type='checkbox'\r\n            onChange={()=>this.setState({value1: !this.state.value1})}\r\n            style={{marginRight: 5}}\r\n          />\r\n           <text>{this.state.value1 ? 'Hide' : 'Show' } {this.state.support.split('/')[0]}</text>\r\n           </div>\r\n          )\r\n          : null\r\n        }\r\n          \r\n          \r\n          {\r\n          (this.state.support.split('/')[1]) ?\r\n          (<div class=\"col\">\r\n          <input\r\n            type='checkbox'\r\n            onChange={()=>this.setState({value2: !this.state.value2})}\r\n            style={{marginRight: 5}}\r\n          />\r\n           <text>{this.state.value2 ? 'Hide' : 'Show' } {this.state.support.split('/')[1]}</text>\r\n           </div>\r\n          )\r\n          : null\r\n        }\r\n            {\r\n          (this.state.support.split('/')[2]) ?\r\n          (<div class=\"col\">\r\n          <input\r\n            type='checkbox'\r\n            onChange={()=>this.setState({value3: !this.state.value3})}\r\n            style={{marginRight: 5}}\r\n          />\r\n           <text>{this.state.value3 ? 'Hide' : 'Show' } {this.state.support.split('/')[2]}</text>\r\n           </div>\r\n          )\r\n          : null\r\n        }\r\n        \r\n          \r\n        {\r\n          (this.state.support.split('/')[3]) ?\r\n          (<div class=\"col\">\r\n          <input\r\n            type='checkbox'\r\n            onChange={()=>this.setState({value4: !this.state.value4})}\r\n            style={{marginRight: 5}}\r\n          />\r\n           <text>{this.state.value4 ? 'Hide' : 'Show' } {this.state.support.split('/')[3]}</text>\r\n           </div>\r\n          )\r\n          : null\r\n        }\r\n             {\r\n          (this.state.support.split('/')[4]) ?\r\n          (<div class=\"col\">\r\n          <input\r\n            type='checkbox'\r\n            onChange={()=>this.setState({value5: !this.state.value5})}\r\n            style={{marginRight: 5}}\r\n          />\r\n           <text>{this.state.value5 ? 'Hide' : 'Show' } {this.state.support.split('/')[4]}</text>\r\n           </div>\r\n          )\r\n          : null\r\n        }\r\n        </div>\r\n        \r\n        </div>\r\n      </div>\r\n        <Phylotree\r\n          width={width}\r\n          height={height}\r\n          transform={`translate(${padding}, ${padding})`}\r\n          labelStyler={this.labelStyler}\r\n          newick={this.state.newick}\r\n          alignTips={this.state.alignTips}\r\n          sort={this.state.sort}\r\n          reroot={this.state.reroot}\r\n          showAttributes={this.state.attribute}\r\n          showLabels ={this.state.showlabel}\r\n          showValue1={this.state.value1}\r\n          showValue2={this.state.value2}\r\n          showValue3={this.state.value3}\r\n          showValue4={this.state.value4}\r\n          showValue5={this.state.value5}\r\n          tooltip ={TooltipContents}\r\n          isOpen={this.openDropdown}\r\n          includeBLAxis\r\n        />\r\n   \r\n    </div>); \r\n  }\r\n}\r\nPhylotreeApplication.defaultProps = {\r\n  padding: 100,\r\n  height: 600,\r\n  width: 600,\r\n  support: \"value 1/value 2/value 3/value 4/value 5\"\r\n};\r\n\r\nexport default PhylotreeApplication;\r\n\r\n","D:\\app test\\phylotree-react\\src\\components\\tooltip_container.jsx",[],"D:\\app test\\phylotree-react\\src\\components\\text_width.jsx",[],"D:\\app test\\phylotree-react\\src\\components\\svg.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":261,"column":16,"nodeType":"53","endLine":262,"endColumn":18},{"ruleId":"51","severity":1,"message":"52","line":264,"column":16,"nodeType":"53","endLine":264,"endColumn":41},{"ruleId":"51","severity":1,"message":"52","line":265,"column":16,"nodeType":"53","endLine":265,"endColumn":42},{"ruleId":"54","severity":1,"message":"55","line":311,"column":11,"nodeType":"53","endLine":311,"endColumn":46},{"ruleId":"54","severity":1,"message":"55","line":318,"column":11,"nodeType":"53","endLine":318,"endColumn":47},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]