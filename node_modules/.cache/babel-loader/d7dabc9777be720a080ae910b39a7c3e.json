{"ast":null,"code":"import range from \"./range.js\";\nimport sort from \"./sort.js\";\nexport default function rank(values, valueof) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values, valueof);\n  const n = values.length;\n  const r = new Float64Array(n);\n  let last, l;\n  sort(range(n), i => values[i]).forEach((j, i) => {\n    const value = values[j];\n\n    if (value == null || !(value <= value)) {\n      r[j] = NaN;\n      return;\n    }\n\n    if (last === undefined || !(value <= last)) {\n      last = value;\n      l = i;\n    }\n\n    r[j] = l;\n  });\n  return r;\n}","map":{"version":3,"sources":["D:/app test/phylotree-react/node_modules/d3-array/src/rank.js"],"names":["range","sort","rank","values","valueof","Symbol","iterator","TypeError","Array","from","n","length","r","Float64Array","last","l","i","forEach","j","value","NaN","undefined"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,eAAe,SAASC,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+B;AAC5C,MAAI,OAAOD,MAAM,CAACE,MAAM,CAACC,QAAR,CAAb,KAAmC,UAAvC,EAAmD,MAAM,IAAIC,SAAJ,CAAc,wBAAd,CAAN;AACnDJ,EAAAA,MAAM,GAAGK,KAAK,CAACC,IAAN,CAAWN,MAAX,EAAmBC,OAAnB,CAAT;AACA,QAAMM,CAAC,GAAGP,MAAM,CAACQ,MAAjB;AACA,QAAMC,CAAC,GAAG,IAAIC,YAAJ,CAAiBH,CAAjB,CAAV;AACA,MAAII,IAAJ,EAAUC,CAAV;AACAd,EAAAA,IAAI,CAACD,KAAK,CAACU,CAAD,CAAN,EAAYM,CAAD,IAAOb,MAAM,CAACa,CAAD,CAAxB,CAAJ,CAAiCC,OAAjC,CAAyC,CAACC,CAAD,EAAIF,CAAJ,KAAU;AACjD,UAAMG,KAAK,GAAGhB,MAAM,CAACe,CAAD,CAApB;;AACA,QAAIC,KAAK,IAAI,IAAT,IAAiB,EAAEA,KAAK,IAAIA,KAAX,CAArB,EAAwC;AACtCP,MAAAA,CAAC,CAACM,CAAD,CAAD,GAAOE,GAAP;AACA;AACD;;AACD,QAAIN,IAAI,KAAKO,SAAT,IAAsB,EAAEF,KAAK,IAAIL,IAAX,CAA1B,EAA4C;AAC1CA,MAAAA,IAAI,GAAGK,KAAP;AACAJ,MAAAA,CAAC,GAAGC,CAAJ;AACD;;AACDJ,IAAAA,CAAC,CAACM,CAAD,CAAD,GAAOH,CAAP;AACD,GAXD;AAYA,SAAOH,CAAP;AACD","sourcesContent":["import range from \"./range.js\";\nimport sort from \"./sort.js\";\n\nexport default function rank(values, valueof) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values, valueof);\n  const n = values.length;\n  const r = new Float64Array(n);\n  let last, l;\n  sort(range(n), (i) => values[i]).forEach((j, i) => {\n    const value = values[j];\n    if (value == null || !(value <= value)) {\n      r[j] = NaN;\n      return;\n    }\n    if (last === undefined || !(value <= last)) {\n      last = value;\n      l = i;\n    }\n    r[j] = l;\n  });\n  return r;\n}\n"]},"metadata":{},"sourceType":"module"}