{"ast":null,"code":"var _jsxFileName = \"D:\\\\app test\\\\phylotree-react\\\\src\\\\components\\\\phylotree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { phylotree } from \"phylotree\";\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport _ from \"underscore\";\nimport { max } from \"d3-array\";\nimport Branch from \"./branch.jsx\";\nimport text_width from \"./text_width\";\nimport SVG from \"./svg.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction xCoord(d) {\n  return d.y;\n}\n\nfunction yCoord(d) {\n  return d.x;\n}\n\nfunction x_branch_lengths(node, accessor) {\n  if (!node.parent) return 0;\n  const bl = accessor(node);\n  return bl + node.parent.data.abstract_x;\n}\n\nfunction x_no_branch_lengths(node) {\n  return node.parent ? node.parent.data.abstract_x + 1 : 2;\n}\n\nfunction default_accessor(node) {\n  return +node.data.attribute;\n}\n\nfunction sort_nodes(tree, direction) {\n  tree.traverse_and_compute(function (n) {\n    var d = 1;\n\n    if (n.children && n.children.length) {\n      d += max(n.children, function (d) {\n        return d[\"count_depth\"];\n      });\n    }\n\n    n[\"count_depth\"] = d;\n  });\n  const asc = direction === \"ascending\";\n  tree.resort_children(function (a, b) {\n    return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n  });\n}\n\nfunction re_root(tree, node) {\n  tree.reroot(node);\n  return tree;\n} // function swap_nodes (tree, node) {\n//   const root = tree.get_node_by_name(node);\n//   root.children.traverse_and_compute (function (n) {\n//     var d = 1;\n//     if (n.children && n.children.length) {\n//       d += max (n.children, function (d) { return d[\"count_depth\"];});\n//     }\n//     n[\"count_depth\"] = d;\n//   });\n//   const asc = direction === \"ascending\";\n//   root.children.resort_children (function (a,b) {\n//     return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n//   });\n// }\n\n\nfunction placenodes(tree, perform_internal_layout, accessor, sort) {\n  accessor = accessor || default_accessor;\n\n  if (sort) {\n    sort_nodes(tree, sort);\n  } // if(reroot) {\n  //   re_root(tree, reroot) \n  // }\n  //   var current_leaf_height = -1,\n  //     unique_id = 0;\n  //   tree.max_x = 0;\n  //   const has_branch_lengths = Boolean(accessor(tree.get_tips()[0])),\n  //     x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\n  //   function node_layout(node) {\n  //     if(!node.unique_id) {\n  //       unique_id = node.unique_id = unique_id + 1;\n  //     }\n  //     node.data.abstract_x = x_branch_length(node, accessor);\n  //     tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n  //     if(node.children) {\n  //       node.data.abstract_y = node.children.map(node_layout)\n  //         .reduce( (a,b) => a + b, 0) / node.children.length;\n  //     } else {\n  //       current_leaf_height = node.data.abstract_y = current_leaf_height+1;\n  //     }\n  //     return node.data.abstract_y;\n  //   }\n  //   function internal_node_layout(node) {\n  //     unique_id = node.unique_id = unique_id + 1;\n  //     node.data.abstract_x = x_branch_length(node, accessor);\n  //     tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n  //     if(!tree.is_leafnode(node)) {\n  //       node.children.forEach(internal_node_layout);\n  //     }\n  //     if(!node.data.abstract_y && (node.data.name !== \"new_root\")) {\n  //       current_leaf_height = node.data.abstract_y = current_leaf_height+1;\n  //       tree.node_order.push(node.data.name);\n  //     }\n  //     if(node.parent && !node.parent.data.abstract_y && (node.data.name !== \"new_root\")) {\n  //       if(node.data.name !== \"new_root\") {\n  //         current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\n  //         tree.node_order.push(node.parent.data.name);\n  //       } \n  //     }\n  //     tree.max_y = Math.max(tree.max_y, current_leaf_height);\n  //   }\n  //   if(perform_internal_layout) {\n  //     tree.max_y = 0;\n  //     tree.node_order = [];\n  //     internal_node_layout(tree.nodes);\n  //     const root = tree.get_node_by_name(\"new_root\");\n  //     root.data.abstract_y = root.children.map(child => child.data.abstract_y)\n  //       .reduce((a,b)=>a+b, 0) / root.children.length;\n  //   } else {\n  //     node_layout(tree.nodes);\n  //     tree.max_y = current_leaf_height;\n  //   }\n  // }\n  // else {\n\n\n  var current_leaf_height = -1,\n      unique_id = 0;\n  tree.max_x = 0;\n  const has_branch_lengths = Boolean(accessor(tree.getTips()[0])),\n        x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\n\n  function node_layout(node) {\n    if (!node.unique_id) {\n      unique_id = node.unique_id = unique_id + 1;\n    }\n\n    node.data.abstract_x = x_branch_length(node, accessor);\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n\n    if (node.children) {\n      node.data.abstract_y = node.children.map(node_layout).reduce((a, b) => a + b, 0) / node.children.length;\n    } else {\n      current_leaf_height = node.data.abstract_y = current_leaf_height + 1;\n    }\n\n    return node.data.abstract_y;\n  }\n\n  function internal_node_layout(node) {\n    unique_id = node.unique_id = unique_id + 1;\n    node.data.abstract_x = x_branch_length(node, accessor);\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n\n    if (!tree.isLeafNode(node)) {\n      node.children.forEach(internal_node_layout);\n    }\n\n    if (!node.data.abstract_y && node.data.name !== \"root\" && node.data.name !== \"new_root\") {\n      current_leaf_height = node.data.abstract_y = current_leaf_height + 1;\n      tree.node_order.push(node.data.name);\n    }\n\n    if (node.parent && !node.parent.data.abstract_y && node.data.name !== \"root\" && node.data.name !== \"new_root\") {\n      if (node.parent.data.name !== \"root\" && node.parent.data.name !== \"new_root\") {\n        current_leaf_height = node.parent.data.abstract_y = current_leaf_height + 1;\n        tree.node_order.push(node.parent.data.name);\n      }\n    }\n\n    tree.max_y = Math.max(tree.max_y, current_leaf_height);\n  }\n\n  if (perform_internal_layout) {\n    tree.max_y = 0;\n    tree.node_order = [];\n    internal_node_layout(tree.nodes);\n    const root = tree.getNodeByName(\"root\") && tree.getNodeByName(\"__reroot_top_clade\");\n    root.data.abstract_y = root.children.map(child => child.data.abstract_y).reduce((a, b) => a + b, 0) / root.children.length;\n  } else {\n    node_layout(tree.nodes);\n    tree.max_y = current_leaf_height; // }\n  }\n}\n\nfunction getColorScale(tree, highlightBranches) {\n  if (!highlightBranches) return null;\n\n  if (typeof highlightBranches === \"boolean\") {\n    return tree.parsed_tags && highlightBranches ? scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) : null;\n  }\n\n  const pairs = _.pairs(highlightBranches);\n\n  return scaleOrdinal().domain(pairs.map(p => p[0])).range(pairs.map(p => p[1]));\n} //  function toggleCollapse(node) {\n//     if (node.collapsed) {\n//       node.collapsed = false;\n//       let unhide = function(n) {\n//         if (!isLeafNode(n)) {\n//           if (!n.collapsed) {\n//             n.children.forEach(unhide);\n//           }\n//         }\n//         n.hidden = false;\n//       };\n//       unhide(node);\n//     } else {\n//       node.collapsed = true;\n//     }\n//     this.placenodes();\n//     return this;\n//   }\n\n\nfunction Phylotree(props) {\n  _s();\n\n  const [tooltip, setTooltip] = useState(false);\n  const {\n    width,\n    height,\n    maxLabelWidth\n  } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const container = useRef();\n  useEffect(() => {\n    window.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleClickOutside = event => {\n    if (container.current && !container.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  };\n\n  var {\n    tree,\n    newick\n  } = props;\n\n  if (!tree && !newick) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 12\n    }, this);\n  } else if (!tree) {\n    tree = new phylotree(newick);\n\n    if (props.reroot) {\n      tree = tree.reroot(props.reroot, 0.5); // placenodes(tree, props.internalNodeLabels, default_accessor, props.sort); \n    } //  tree = new phylotree(tree.getNewick());\n\n\n    console.log(tree.getNewick(function (d) {\n      return d[1];\n    }));\n  }\n\n  if (!props.skipPlacement) {\n    placenodes(tree, props.internalNodeLabels, props.accessor, props.sort);\n  }\n\n  function attachTextWidth(node) {\n    node.data.text_width = text_width(node.data.name, 12, maxLabelWidth);\n    if (node.children) node.children.forEach(attachTextWidth);\n  }\n\n  attachTextWidth(tree.nodes);\n  const sorted_tips = tree.getTips().sort((a, b) => b.data.abstract_x - a.data.abstract_x);\n  var rightmost;\n\n  for (let i = 0; i < sorted_tips.length; i++) {\n    let tip = sorted_tips[i];\n    rightmost = width - tip.data.text_width;\n    let scale = rightmost / tip.data.abstract_x;\n    let none_cross = sorted_tips.map(tip => {\n      const tip_x = tip.data.abstract_x * scale,\n            text_x = width - tip.data.text_width,\n            this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\n      return this_doesnt_cross;\n    }).every(x => x);\n    if (none_cross) break;\n  }\n\n  const x_scale = scaleLinear().domain([0, tree.max_x]).range([0, rightmost]),\n        y_scale = scaleLinear().domain([0, tree.max_y]).range([props.includeBLAxis ? 60 : 0, height]),\n        color_scale = getColorScale(tree, props.highlightBranches);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"row\",\n    class: \"col-md-12\",\n    children: [/*#__PURE__*/_jsxDEV(SVG, {\n      width: width + 100,\n      height: height + 100,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: props.transform,\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 3\n        }, this), tree.links.map(link => {\n          const source_id = link.source.unique_id,\n                target_id = link.target.unique_id,\n                key = source_id + \",\" + target_id,\n                show_label = props.internalNodeLabels || props.showLabels && tree.isLeafNode(link.target);\n          const show_attribute = props.showAttributes;\n          const show_value1 = props.showValue1;\n          const show_value2 = props.showValue2;\n          const show_value3 = props.showValue3;\n          const show_value4 = props.showValue4;\n          const show_value5 = props.showValue5;\n          return /*#__PURE__*/_jsxDEV(Branch, {\n            tree: tree,\n            xScale: x_scale,\n            yScale: y_scale,\n            colorScale: color_scale,\n            link: link,\n            showLabel: show_label,\n            showAttribute: show_attribute,\n            showValue1: show_value1,\n            showValue2: show_value2,\n            showValue3: show_value3,\n            showValue4: show_value4,\n            showValue5: show_value5,\n            maxLabelWidth: maxLabelWidth,\n            width: width,\n            alignTips: props.alignTips,\n            branchStyler: props.branchStyler,\n            labelStyler: props.labelStyler,\n            tooltip: props.tooltip,\n            setTooltip: setTooltip,\n            setIsOpen: setIsOpen,\n            isOpen: props.isOpen\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 7\n          }, this);\n        }), tooltip ? /*#__PURE__*/_jsxDEV(props.tooltip, {\n          width: props.width,\n          height: props.height,\n          ...tooltip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 18\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: container,\n      children: isOpen ? /*#__PURE__*/_jsxDEV(props.isOpen, { ...isOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 5\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Phylotree, \"cWymCRzj7fmnIJ4divBVs0y8w5g=\");\n\n_c = Phylotree;\nPhylotree.defaultProps = {\n  width: 500,\n  height: 500,\n  showLabels: true,\n  showAttributes: false,\n  showValue1: false,\n  showValue2: false,\n  showValue3: false,\n  showValue4: false,\n  showValue5: false,\n  skipPlacement: false,\n  maxLabelWidth: 20,\n  alignTips: \"right\",\n  accessor: default_accessor,\n  branchStyler: null,\n  labelStyler: null,\n  tooltip: null,\n  isOpen: null,\n  sort: null,\n  reroot: null,\n  newick: null,\n  includeBLAxis: true\n};\nexport default Phylotree;\nexport { placenodes };\n\nvar _c;\n\n$RefreshReg$(_c, \"Phylotree\");","map":{"version":3,"sources":["D:/app test/phylotree-react/src/components/phylotree.jsx"],"names":["React","useState","useRef","useEffect","phylotree","scaleLinear","scaleOrdinal","schemeCategory10","_","max","Branch","text_width","SVG","xCoord","d","y","yCoord","x","x_branch_lengths","node","accessor","parent","bl","data","abstract_x","x_no_branch_lengths","default_accessor","attribute","sort_nodes","tree","direction","traverse_and_compute","n","children","length","asc","resort_children","a","b","re_root","reroot","placenodes","perform_internal_layout","sort","current_leaf_height","unique_id","max_x","has_branch_lengths","Boolean","getTips","x_branch_length","node_layout","Math","abstract_y","map","reduce","internal_node_layout","isLeafNode","forEach","name","node_order","push","max_y","nodes","root","getNodeByName","child","getColorScale","highlightBranches","parsed_tags","domain","range","pairs","p","Phylotree","props","tooltip","setTooltip","width","height","maxLabelWidth","isOpen","setIsOpen","container","window","addEventListener","handleClickOutside","removeEventListener","event","current","contains","target","newick","console","log","getNewick","skipPlacement","internalNodeLabels","attachTextWidth","sorted_tips","rightmost","i","tip","scale","none_cross","tip_x","text_x","this_doesnt_cross","floor","ceil","every","x_scale","y_scale","includeBLAxis","color_scale","transform","links","link","source_id","source","target_id","key","show_label","showLabels","show_attribute","showAttributes","show_value1","showValue1","show_value2","showValue2","show_value3","showValue3","show_value4","showValue4","show_value5","showValue5","alignTips","branchStyler","labelStyler","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef , useEffect } from \"react\";\r\nimport { phylotree } from \"phylotree\";\r\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport _ from \"underscore\";\r\n\r\nimport { max } from \"d3-array\";\r\n\r\nimport Branch from \"./branch.jsx\";\r\nimport text_width from \"./text_width\";\r\nimport SVG from \"./svg.js\";\r\n\r\n\r\n\r\n  function xCoord(d) {\r\n    return d.y;\r\n  }\r\n\r\n  function yCoord(d) {\r\n    return d.x;\r\n  }\r\nfunction x_branch_lengths(node, accessor) {\r\n  if (!node.parent) return 0;\r\n  const bl = accessor(node);\r\n  return  bl + node.parent.data.abstract_x;\r\n}\r\n\r\nfunction x_no_branch_lengths(node) {\r\n  return node.parent ? node.parent.data.abstract_x + 1 : 2;\r\n}\r\n\r\nfunction default_accessor(node){\r\n  return +node.data.attribute;\r\n}\r\n\r\nfunction sort_nodes (tree, direction) {\r\n  tree.traverse_and_compute (function (n) {\r\n    var d = 1;\r\n    if (n.children && n.children.length) {\r\n      d += max (n.children, function (d) { return d[\"count_depth\"];});\r\n    }\r\n    n[\"count_depth\"] = d;\r\n  });\r\n  const asc = direction === \"ascending\";\r\n  tree.resort_children (function (a,b) {\r\n    return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\r\n  });\r\n}\r\nfunction re_root(tree, node) {\r\n   tree.reroot(node)\r\n  return tree\r\n}\r\n// function swap_nodes (tree, node) {\r\n//   const root = tree.get_node_by_name(node);\r\n//   root.children.traverse_and_compute (function (n) {\r\n//     var d = 1;\r\n//     if (n.children && n.children.length) {\r\n//       d += max (n.children, function (d) { return d[\"count_depth\"];});\r\n//     }\r\n//     n[\"count_depth\"] = d;\r\n//   });\r\n//   const asc = direction === \"ascending\";\r\n//   root.children.resort_children (function (a,b) {\r\n//     return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\r\n//   });\r\n// }\r\n\r\n\r\nfunction placenodes(tree, perform_internal_layout, accessor, sort) {\r\n  accessor = accessor || default_accessor;\r\n  if(sort) {\r\n    sort_nodes(tree, sort);\r\n  }\r\n  // if(reroot) {\r\n  //   re_root(tree, reroot) \r\n  // }\r\n//   var current_leaf_height = -1,\r\n//     unique_id = 0;\r\n//   tree.max_x = 0;\r\n//   const has_branch_lengths = Boolean(accessor(tree.get_tips()[0])),\r\n//     x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\r\n//   function node_layout(node) {\r\n//     if(!node.unique_id) {\r\n//       unique_id = node.unique_id = unique_id + 1;\r\n//     }\r\n//     node.data.abstract_x = x_branch_length(node, accessor);\r\n//     tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n//     if(node.children) {\r\n//       node.data.abstract_y = node.children.map(node_layout)\r\n//         .reduce( (a,b) => a + b, 0) / node.children.length;\r\n//     } else {\r\n//       current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n//     }\r\n//     return node.data.abstract_y;\r\n//   }\r\n\r\n//   function internal_node_layout(node) {\r\n//     unique_id = node.unique_id = unique_id + 1;\r\n//     node.data.abstract_x = x_branch_length(node, accessor);\r\n//     tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n//     if(!tree.is_leafnode(node)) {\r\n//       node.children.forEach(internal_node_layout);\r\n//     }\r\n//     if(!node.data.abstract_y && (node.data.name !== \"new_root\")) {\r\n//       current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n//       tree.node_order.push(node.data.name);\r\n//     }\r\n//     if(node.parent && !node.parent.data.abstract_y && (node.data.name !== \"new_root\")) {\r\n//       if(node.data.name !== \"new_root\") {\r\n//         current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\r\n//         tree.node_order.push(node.parent.data.name);\r\n//       } \r\n//     }\r\n//     tree.max_y = Math.max(tree.max_y, current_leaf_height);\r\n//   }\r\n\r\n//   if(perform_internal_layout) {\r\n//     tree.max_y = 0;\r\n//     tree.node_order = [];\r\n//     internal_node_layout(tree.nodes);\r\n//     const root = tree.get_node_by_name(\"new_root\");\r\n//     root.data.abstract_y = root.children.map(child => child.data.abstract_y)\r\n//       .reduce((a,b)=>a+b, 0) / root.children.length;\r\n//   } else {\r\n//     node_layout(tree.nodes);\r\n//     tree.max_y = current_leaf_height;\r\n//   }\r\n// }\r\n// else {\r\nvar current_leaf_height = -1,\r\nunique_id = 0;\r\ntree.max_x = 0;\r\nconst has_branch_lengths = Boolean(accessor(tree.getTips()[0])),\r\nx_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\r\nfunction node_layout(node) {\r\nif(!node.unique_id) {\r\n  unique_id = node.unique_id = unique_id + 1;\r\n}\r\nnode.data.abstract_x = x_branch_length(node, accessor);\r\ntree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\nif(node.children) {\r\n  node.data.abstract_y = node.children.map(node_layout)\r\n    .reduce( (a,b) => a + b, 0) / node.children.length;\r\n} else {\r\n  current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n}\r\nreturn node.data.abstract_y;\r\n}\r\n\r\nfunction internal_node_layout(node) {\r\nunique_id = node.unique_id = unique_id + 1;\r\nnode.data.abstract_x = x_branch_length(node, accessor);\r\ntree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\nif(!tree.isLeafNode(node)) {\r\n  node.children.forEach(internal_node_layout);\r\n}\r\nif(!node.data.abstract_y && (node.data.name !== \"root\" && node.data.name !== \"new_root\" )) {\r\n  current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n  tree.node_order.push(node.data.name);\r\n}\r\nif(node.parent && !node.parent.data.abstract_y && (node.data.name !== \"root\" && node.data.name !== \"new_root\")) {\r\n  if(node.parent.data.name !== \"root\" && node.parent.data.name !== \"new_root\") {\r\n    current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\r\n    tree.node_order.push(node.parent.data.name);\r\n  } \r\n}\r\ntree.max_y = Math.max(tree.max_y, current_leaf_height);\r\n}\r\n\r\nif(perform_internal_layout) {\r\ntree.max_y = 0;\r\ntree.node_order = [];\r\ninternal_node_layout(tree.nodes);\r\nconst root = tree.getNodeByName(\"root\") && tree.getNodeByName(\"__reroot_top_clade\");\r\nroot.data.abstract_y = root.children.map(child => child.data.abstract_y)\r\n  .reduce((a,b)=>a+b, 0) / root.children.length;\r\n} else {\r\nnode_layout(tree.nodes);\r\ntree.max_y = current_leaf_height;\r\n// }\r\n}\r\n}\r\n\r\n\r\nfunction getColorScale(tree, highlightBranches) {\r\n  if(!highlightBranches) return null;\r\n  if(typeof highlightBranches === \"boolean\") {\r\n    return tree.parsed_tags && highlightBranches ? \r\n      scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) :\r\n      null;\r\n  }\r\n  const pairs = _.pairs(highlightBranches);\r\n  return scaleOrdinal()\r\n    .domain(pairs.map(p => p[0]))\r\n    .range(pairs.map(p => p[1]));\r\n}\r\n\r\n//  function toggleCollapse(node) {\r\n//     if (node.collapsed) {\r\n//       node.collapsed = false;\r\n\r\n//       let unhide = function(n) {\r\n//         if (!isLeafNode(n)) {\r\n//           if (!n.collapsed) {\r\n//             n.children.forEach(unhide);\r\n//           }\r\n//         }\r\n//         n.hidden = false;\r\n//       };\r\n\r\n//       unhide(node);\r\n//     } else {\r\n//       node.collapsed = true;\r\n//     }\r\n\r\n//     this.placenodes();\r\n//     return this;\r\n//   }\r\nfunction Phylotree(props) {\r\n  const [tooltip, setTooltip] = useState(false);\r\n  const { width, height, maxLabelWidth } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const container = useRef();\r\n\r\n  useEffect (()=>{\r\n    window.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n    window.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }\r\n  },[])\r\n  const handleClickOutside = (event) => {\r\n    if (\r\n      container.current &&\r\n      !container.current.contains(event.target)\r\n    ) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n  var{ tree, newick } = props;\r\n  if (!tree && !newick) {\r\n    return <g />;\r\n  } else if(!tree) {\r\n    tree = new phylotree(newick);\r\n    \r\n    if(props.reroot) {\r\n    tree =  tree.reroot(props.reroot, 0.5)\r\n    \r\n    // placenodes(tree, props.internalNodeLabels, default_accessor, props.sort); \r\n    \r\n   }\r\n  //  tree = new phylotree(tree.getNewick());\r\n    console.log(tree.getNewick(function(d){\r\n      return d[1]\r\n    }))\r\n  }\r\n    if(!props.skipPlacement ) {\r\n    placenodes(tree, props.internalNodeLabels, props.accessor, props.sort);\r\n    \r\n  }\r\n  function attachTextWidth(node) {\r\n    node.data.text_width = text_width(node.data.name, 12, maxLabelWidth);\r\n    if(node.children) node.children.forEach(attachTextWidth);\r\n  }\r\n  attachTextWidth(tree.nodes);\r\n  const sorted_tips = tree.getTips().sort((a,b) => (\r\n      b.data.abstract_x - a.data.abstract_x\r\n    ));\r\n  var rightmost;\r\n \r\n    for(let i=0; i < sorted_tips.length; i++) {\r\n      let tip = sorted_tips[i];\r\n      rightmost = width - tip.data.text_width;\r\n      let scale = rightmost / tip.data.abstract_x;\r\n      let none_cross = sorted_tips.map(tip => {\r\n        const tip_x = tip.data.abstract_x * scale,\r\n          text_x = width - tip.data.text_width,\r\n          this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\r\n        return this_doesnt_cross;\r\n      }).every(x => x);\r\n      if(none_cross) break;\r\n   \r\n  }\r\n  const x_scale = scaleLinear()\r\n      .domain([0, tree.max_x])\r\n      .range([0, rightmost]),\r\n    y_scale = scaleLinear()\r\n      .domain([0, tree.max_y])\r\n      .range([props.includeBLAxis ? 60 : 0, height]),\r\n    color_scale = getColorScale(tree, props.highlightBranches);\r\n  \r\n\r\n  return (\r\n  <div class=\"row\" class= \"col-md-12\">\r\n    <SVG width={width+100} height={height+100} >\r\n   \r\n  \r\n  <g transform={props.transform}>\r\n  <defs></defs>\r\n    {/* {props.includeBLAxis ? <g>\r\n      <text\r\n        x={x_scale(tree.max_x/2)}\r\n        y={10}\r\n        alignmentBaseline='middle'\r\n        textAnchor='middle'\r\n        fontFamily='Courier'\r\n      >\r\n        Substitutions per site\r\n      </text>\r\n      <AxisTop\r\n        transform={`translate(0, 40)`}\r\n        scale={x_scale}\r\n      />\r\n    </g> : null } */}\r\n    \r\n    {tree.links.map(link => {\r\n      const source_id = link.source.unique_id,\r\n        target_id = link.target.unique_id,\r\n        key = source_id + \",\" + target_id,\r\n        show_label = props.internalNodeLabels ||\r\n          (props.showLabels && tree.isLeafNode(link.target));\r\n      const  show_attribute = props.showAttributes;\r\n      const show_value1 = props.showValue1;\r\n      const show_value2 = props.showValue2;\r\n      const show_value3 = props.showValue3;\r\n      const show_value4 = props.showValue4;\r\n      const show_value5 = props.showValue5;\r\n      return(\r\n      <Branch\r\n        tree={tree}\r\n        key={key}\r\n        xScale={x_scale}\r\n        yScale={y_scale}\r\n        colorScale={color_scale}\r\n        link={link}\r\n        showLabel={show_label}\r\n        showAttribute={show_attribute}\r\n        showValue1={show_value1}\r\n        showValue2={show_value2}\r\n        showValue3={show_value3}\r\n        showValue4={show_value4}\r\n        showValue5={show_value5}\r\n        maxLabelWidth={maxLabelWidth}\r\n        width={width}\r\n        alignTips={props.alignTips}\r\n        branchStyler={props.branchStyler}\r\n        labelStyler={props.labelStyler}\r\n        tooltip={props.tooltip}\r\n        setTooltip={setTooltip}\r\n        setIsOpen={setIsOpen}\r\n        isOpen ={props.isOpen}\r\n      />\r\n     );\r\n    }) } \r\n    \r\n    { tooltip ? (<props.tooltip\r\n      width={props.width}\r\n      height={props.height}\r\n      {...tooltip}\r\n    />\r\n    ) : null }\r\n  </g>\r\n  </SVG>\r\n  <div ref={container}>\r\n  { isOpen ? (\r\n    <props.isOpen \r\n    {...isOpen}\r\n    />\r\n  ) : null}\r\n  </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nPhylotree.defaultProps = {\r\n  width: 500,\r\n  height: 500,\r\n  showLabels: true,\r\n  showAttributes: false,\r\n  showValue1: false,\r\n  showValue2: false,\r\n  showValue3: false,\r\n  showValue4: false,\r\n  showValue5: false,\r\n  skipPlacement: false,\r\n  maxLabelWidth: 20,\r\n  alignTips: \"right\",\r\n  accessor: default_accessor,\r\n  branchStyler: null,\r\n  labelStyler: null,\r\n  tooltip: null,\r\n  isOpen: null,\r\n  sort: null,\r\n  reroot: null,\r\n  newick: null,\r\n  includeBLAxis: true\r\n};\r\n\r\nexport default Phylotree;\r\nexport {\r\n  placenodes\r\n};\r\n"]},"metadata":{},"sourceType":"module"}