{"ast":null,"code":"var _jsxFileName = \"D:\\\\app test\\\\phylotree-react\\\\src\\\\lib\\\\components\\\\phylotree.jsx\",\n    _s = $RefreshSig$();\n\nimport { max } from \"d3-array\";\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport { phylotree } from \"phylotree\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport _ from \"underscore\";\nimport Branch from \"./branch\";\nimport SVG from \"./svg\";\nimport text_width from \"./text_width\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction x_branch_lengths(node, accessor) {\n  if (!node.parent) return 0;\n  const bl = accessor(node);\n  return bl + node.parent.data.abstract_x;\n}\n\nfunction x_no_branch_lengths(node) {\n  return node.parent ? node.parent.data.abstract_x + 1 : 2;\n}\n\nfunction default_accessor(node) {\n  return +node.data.attribute;\n}\n\nfunction sort_nodes(tree, direction) {\n  tree.traverse_and_compute(function (n) {\n    var d = 1;\n\n    if (n.children && n.children.length) {\n      d += max(n.children, function (d) {\n        return d[\"count_depth\"];\n      });\n    }\n\n    n[\"count_depth\"] = d;\n  });\n  const asc = direction === \"ascending\";\n  tree.resortChildren(function (a, b) {\n    return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n  });\n}\n\nfunction toggleCollapse(tree, nodes) {\n  nodes.map(function (node) {\n    if (node.collapsed) {\n      node.collapsed = false;\n\n      let unhide = function (n) {\n        if (!tree.isLeafNode(n)) {\n          if (!n.collapsed) {\n            n.children.forEach(unhide);\n          }\n        }\n\n        n.hidden = true;\n      };\n\n      unhide(node);\n    } else {\n      node.collapsed = true;\n    }\n  });\n}\n\nfunction placenodes(tree, perform_internal_layout, accessor, sort, collapse) {\n  accessor = accessor || default_accessor;\n\n  if (sort) {\n    sort_nodes(tree, sort);\n  }\n\n  if (collapse) {\n    toggleCollapse(tree, collapse);\n  }\n\n  var current_leaf_height = -1,\n      unique_id = 0;\n  tree.max_x = 0;\n  const has_branch_lengths = Boolean(accessor(tree.getTips()[0])),\n        x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\n\n  function node_layout(node) {\n    if (!node.unique_id) {\n      unique_id = node.unique_id = unique_id + 1;\n    }\n\n    node.data.abstract_x = x_branch_length(node, accessor);\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n\n    if (node.children) {\n      node.data.abstract_y = node.children.map(node_layout).reduce((a, b) => a + b, 0) / node.children.length;\n    } else {\n      current_leaf_height = node.data.abstract_y = current_leaf_height + 1;\n    }\n\n    return node.data.abstract_y;\n  }\n\n  function internal_node_layout(node) {\n    unique_id = node.unique_id = unique_id + 1;\n    node.data.abstract_x = x_branch_length(node, accessor);\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n\n    if (!tree.isLeafNode(node)) {\n      node.children.forEach(internal_node_layout);\n    }\n\n    if (!node.data.abstract_y && node.data.name !== \"root\") {\n      current_leaf_height = node.data.abstract_y = current_leaf_height + 1;\n      tree.nodeOrder.push(node.data.name);\n    }\n\n    if (node.parent && !node.parent.data.abstract_y && node.data.name !== \"root\") {\n      if (node.parent.data.name !== \"root\") {\n        current_leaf_height = node.parent.data.abstract_y = current_leaf_height + 1;\n        tree.node_order.push(node.parent.data.name);\n      }\n    }\n\n    tree.max_y = Math.max(tree.max_y, current_leaf_height);\n  }\n\n  if (perform_internal_layout) {\n    tree.max_y = 0;\n    tree.node_order = [];\n    internal_node_layout(tree.nodes);\n    const root = tree.getNodeByName(\"root\") || tree.getNodeByName(\"new_root\");\n    root.data.abstract_y = root.children.map(child => child.data.abstract_y).reduce((a, b) => a + b, 0) / root.children.length;\n  } else {\n    node_layout(tree.nodes);\n    tree.max_y = current_leaf_height;\n  }\n}\n\nfunction getColorScale(tree, highlightBranches) {\n  if (!highlightBranches) return null;\n\n  if (typeof highlightBranches === \"boolean\") {\n    return tree.parsed_tags && highlightBranches ? scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) : null;\n  }\n\n  const pairs = _.pairs(highlightBranches);\n\n  return scaleOrdinal().domain(pairs.map(p => p[0])).range(pairs.map(p => p[1]));\n}\n\nfunction Phylotree(props) {\n  _s();\n\n  const [tooltip, setTooltip] = useState(false);\n  const {\n    width,\n    height,\n    maxLabelWidth\n  } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const container = useRef();\n  const [isExport, setIsExport] = useState(props.getNewick);\n  useEffect(() => {\n    setIsOpen(false);\n    window.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [props.reroot, props.collapsed]);\n\n  const handleClickOutside = event => {\n    if (container.current && !container.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  };\n\n  var {\n    tree,\n    newick\n  } = props;\n\n  if (!tree && !newick) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 16\n    }, this);\n  } else if (!tree) {\n    tree = new phylotree(newick);\n\n    if (props.collapsed) {\n      const c = [];\n      props.collapsed.forEach(function (node) {\n        for (let n of tree.getNodes()) {\n          if (!tree.isLeafNode(n)) {\n            if (node.data.name === n.data.name) {\n              c.push(n);\n            }\n          }\n        }\n      });\n      toggleCollapse(tree, c);\n      placenodes(tree, props.internalNodeLabels, props.accessor, props.sort, c);\n    }\n\n    if (!props.skipPlacement) {\n      placenodes(tree, props.internalNodeLabels, props.accessor, props.sort);\n    }\n  }\n\n  function attachTextWidth(node) {\n    node.data.text_width = text_width(node.data.name, 14, maxLabelWidth);\n    if (node.children) node.children.forEach(attachTextWidth);\n  }\n\n  attachTextWidth(tree.nodes);\n  const sorted_tips = tree.getTips().sort((a, b) => b.data.abstract_x - a.data.abstract_x);\n  var rightmost = width;\n\n  for (let i = 0; i < sorted_tips.length; i++) {\n    let tip = sorted_tips[i];\n    rightmost = width - tip.data.text_width;\n    let scale = rightmost / tip.data.abstract_x;\n    let none_cross = sorted_tips.map(tip => {\n      const tip_x = tip.data.abstract_x * scale,\n            text_x = width - tip.data.text_width,\n            this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\n      return this_doesnt_cross;\n    }).every(x => x);\n    if (none_cross) break;\n  }\n\n  const x_scale = scaleLinear().domain([0, tree.max_x]).range([0, rightmost]),\n        y_scale = scaleLinear().domain([0, tree.max_y]).range([props.includeBLAxis ? 60 : 0, height]),\n        color_scale = getColorScale(tree, props.highlightBranches);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"col-md-12\",\n    children: [/*#__PURE__*/_jsxDEV(SVG, {\n      width: width + 100,\n      height: height + 100,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: props.transform,\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), tree.links.map(link => {\n          const source_id = link.source.unique_id,\n                target_id = link.target.unique_id,\n                key = source_id + \",\" + target_id,\n                show_label = props.internalNodeLabels || props.showLabels && tree.isLeafNode(link.target);\n          const show_attribute = props.showAttributes;\n          const show_value1 = props.showValue1;\n          const show_value2 = props.showValue2;\n          const show_value3 = props.showValue3;\n          const show_value4 = props.showValue4;\n          const show_value5 = props.showValue5;\n          const round1 = props.round1;\n          const round2 = props.round2;\n          const round3 = props.round3;\n          const round4 = props.round4;\n          const round5 = props.round5;\n          return /*#__PURE__*/_jsxDEV(Branch, {\n            tree: tree,\n            xScale: x_scale,\n            yScale: y_scale,\n            colorScale: color_scale,\n            link: link,\n            showLabel: show_label,\n            showAttribute: show_attribute,\n            showValue1: show_value1,\n            showValue2: show_value2,\n            showValue3: show_value3,\n            showValue4: show_value4,\n            showValue5: show_value5,\n            round1: round1,\n            round2: round2,\n            round3: round3,\n            round4: round4,\n            round5: round5,\n            maxLabelWidth: maxLabelWidth,\n            width: width,\n            alignTips: props.alignTips,\n            branchStyler: props.branchStyler,\n            labelStyler: props.labelStyler,\n            tooltip: props.tooltip,\n            setTooltip: setTooltip,\n            setIsOpen: setIsOpen,\n            isOpen: props.isOpen\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 29\n          }, this);\n        }), tooltip ? /*#__PURE__*/_jsxDEV(props.tooltip, {\n          width: props.width,\n          height: props.height,\n          ...tooltip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 25\n        }, this) : null, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: container,\n      children: [isOpen ? /*#__PURE__*/_jsxDEV(props.isOpen, { ...isOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 27\n      }, this) : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Phylotree, \"4sZLrvXCCTm2OrQ18h16E4vdLUQ=\");\n\n_c = Phylotree;\nPhylotree.defaultProps = {\n  showLabels: true,\n  skipPlacement: false,\n  maxLabelWidth: 20,\n  alignTips: \"left\",\n  accessor: default_accessor,\n  branchStyler: null,\n  labelStyler: null,\n  tooltip: null,\n  includeBLAxis: false\n};\nexport default Phylotree;\nexport { placenodes };\n\nvar _c;\n\n$RefreshReg$(_c, \"Phylotree\");","map":{"version":3,"sources":["D:/app test/phylotree-react/src/lib/components/phylotree.jsx"],"names":["max","scaleLinear","scaleOrdinal","schemeCategory10","phylotree","React","useEffect","useRef","useState","_","Branch","SVG","text_width","x_branch_lengths","node","accessor","parent","bl","data","abstract_x","x_no_branch_lengths","default_accessor","attribute","sort_nodes","tree","direction","traverse_and_compute","n","d","children","length","asc","resortChildren","a","b","toggleCollapse","nodes","map","collapsed","unhide","isLeafNode","forEach","hidden","placenodes","perform_internal_layout","sort","collapse","current_leaf_height","unique_id","max_x","has_branch_lengths","Boolean","getTips","x_branch_length","node_layout","Math","abstract_y","reduce","internal_node_layout","name","nodeOrder","push","node_order","max_y","root","getNodeByName","child","getColorScale","highlightBranches","parsed_tags","domain","range","pairs","p","Phylotree","props","tooltip","setTooltip","width","height","maxLabelWidth","isOpen","setIsOpen","container","isExport","setIsExport","getNewick","window","addEventListener","handleClickOutside","removeEventListener","reroot","event","current","contains","target","newick","c","getNodes","internalNodeLabels","skipPlacement","attachTextWidth","sorted_tips","rightmost","i","tip","scale","none_cross","tip_x","text_x","this_doesnt_cross","floor","ceil","every","x","x_scale","y_scale","includeBLAxis","color_scale","transform","links","link","source_id","source","target_id","key","show_label","showLabels","show_attribute","showAttributes","show_value1","showValue1","show_value2","showValue2","show_value3","showValue3","show_value4","showValue4","show_value5","showValue5","round1","round2","round3","round4","round5","alignTips","branchStyler","labelStyler","defaultProps"],"mappings":"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","sourcesContent":["import { max } from \"d3-array\";\r\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport { phylotree } from \"phylotree\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport _ from \"underscore\";\r\nimport Branch from \"./branch\";\r\nimport SVG from \"./svg\";\r\nimport text_width from \"./text_width\";\r\n\r\nfunction x_branch_lengths(node, accessor) {\r\n    if (!node.parent) return 0;\r\n\r\n    const bl = accessor(node);\r\n    return bl + node.parent.data.abstract_x;\r\n}\r\n\r\nfunction x_no_branch_lengths(node) {\r\n    return node.parent ? node.parent.data.abstract_x + 1 : 2;\r\n}\r\n\r\nfunction default_accessor(node) {\r\n    return +node.data.attribute;\r\n}\r\n\r\nfunction sort_nodes(tree, direction) {\r\n    tree.traverse_and_compute(function (n) {\r\n        var d = 1;\r\n        if (n.children && n.children.length) {\r\n            d += max(n.children, function (d) {\r\n                return d[\"count_depth\"];\r\n            });\r\n        }\r\n        n[\"count_depth\"] = d;\r\n    });\r\n    const asc = direction === \"ascending\";\r\n    tree.resortChildren(function (a, b) {\r\n        return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\r\n    });\r\n}\r\n\r\nfunction toggleCollapse(tree, nodes) {\r\n    nodes.map(function (node) {\r\n        if (node.collapsed) {\r\n            node.collapsed = false;\r\n            let unhide = function (n) {\r\n                if (!tree.isLeafNode(n)) {\r\n                    if (!n.collapsed) {\r\n                        n.children.forEach(unhide);\r\n                    }\r\n                }\r\n                n.hidden = true;\r\n            };\r\n\r\n            unhide(node);\r\n        } else {\r\n            node.collapsed = true;\r\n        }\r\n    });\r\n}\r\n\r\nfunction placenodes(tree, perform_internal_layout, accessor, sort, collapse) {\r\n    accessor = accessor || default_accessor;\r\n    if (sort) {\r\n        sort_nodes(tree, sort);\r\n    }\r\n    if (collapse) {\r\n        toggleCollapse(tree, collapse);\r\n    }\r\n    var current_leaf_height = -1,\r\n        unique_id = 0;\r\n    tree.max_x = 0;\r\n    const has_branch_lengths = Boolean(accessor(tree.getTips()[0])),\r\n        x_branch_length = has_branch_lengths\r\n            ? x_branch_lengths\r\n            : x_no_branch_lengths;\r\n    function node_layout(node) {\r\n        if (!node.unique_id) {\r\n            unique_id = node.unique_id = unique_id + 1;\r\n        }\r\n        node.data.abstract_x = x_branch_length(node, accessor);\r\n        tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n        if (node.children) {\r\n            node.data.abstract_y =\r\n                node.children.map(node_layout).reduce((a, b) => a + b, 0) /\r\n                node.children.length;\r\n        } else {\r\n            current_leaf_height = node.data.abstract_y =\r\n                current_leaf_height + 1;\r\n        }\r\n        return node.data.abstract_y;\r\n    }\r\n\r\n    function internal_node_layout(node) {\r\n        unique_id = node.unique_id = unique_id + 1;\r\n        node.data.abstract_x = x_branch_length(node, accessor);\r\n        tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n        if (!tree.isLeafNode(node)) {\r\n            node.children.forEach(internal_node_layout);\r\n        }\r\n        if (!node.data.abstract_y && node.data.name !== \"root\") {\r\n            current_leaf_height = node.data.abstract_y =\r\n                current_leaf_height + 1;\r\n            tree.nodeOrder.push(node.data.name);\r\n        }\r\n        if (\r\n            node.parent &&\r\n            !node.parent.data.abstract_y &&\r\n            node.data.name !== \"root\"\r\n        ) {\r\n            if (node.parent.data.name !== \"root\") {\r\n                current_leaf_height = node.parent.data.abstract_y =\r\n                    current_leaf_height + 1;\r\n                tree.node_order.push(node.parent.data.name);\r\n            }\r\n        }\r\n        tree.max_y = Math.max(tree.max_y, current_leaf_height);\r\n    }\r\n\r\n    if (perform_internal_layout) {\r\n        tree.max_y = 0;\r\n        tree.node_order = [];\r\n        internal_node_layout(tree.nodes);\r\n        const root =\r\n            tree.getNodeByName(\"root\") || tree.getNodeByName(\"new_root\");\r\n        root.data.abstract_y =\r\n            root.children\r\n                .map((child) => child.data.abstract_y)\r\n                .reduce((a, b) => a + b, 0) / root.children.length;\r\n    } else {\r\n        node_layout(tree.nodes);\r\n        tree.max_y = current_leaf_height;\r\n    }\r\n}\r\n\r\nfunction getColorScale(tree, highlightBranches) {\r\n    if (!highlightBranches) return null;\r\n\r\n    if (typeof highlightBranches === \"boolean\") {\r\n        return tree.parsed_tags && highlightBranches\r\n            ? scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10)\r\n            : null;\r\n    }\r\n    const pairs = _.pairs(highlightBranches);\r\n    return scaleOrdinal()\r\n        .domain(pairs.map((p) => p[0]))\r\n        .range(pairs.map((p) => p[1]));\r\n}\r\n\r\nfunction Phylotree(props) {\r\n    const [tooltip, setTooltip] = useState(false);\r\n    const { width, height, maxLabelWidth } = props;\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const container = useRef();\r\n    const [isExport, setIsExport] = useState(props.getNewick);\r\n    useEffect(() => {\r\n        setIsOpen(false);\r\n\r\n        window.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            window.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [props.reroot, props.collapsed]);\r\n    const handleClickOutside = (event) => {\r\n        if (container.current && !container.current.contains(event.target)) {\r\n            setIsOpen(false);\r\n        }\r\n    };\r\n\r\n    var { tree, newick } = props;\r\n    if (!tree && !newick) {\r\n        return <g />;\r\n    } else if (!tree) {\r\n        tree = new phylotree(newick);\r\n\r\n        if (props.collapsed) {\r\n            const c = [];\r\n            props.collapsed.forEach(function (node) {\r\n                for (let n of tree.getNodes()) {\r\n                    if (!tree.isLeafNode(n)) {\r\n                        if (node.data.name === n.data.name) {\r\n                            c.push(n);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            toggleCollapse(tree, c);\r\n            placenodes(\r\n                tree,\r\n                props.internalNodeLabels,\r\n                props.accessor,\r\n                props.sort,\r\n                c\r\n            );\r\n        }\r\n        if (!props.skipPlacement) {\r\n            placenodes(\r\n                tree,\r\n                props.internalNodeLabels,\r\n                props.accessor,\r\n                props.sort\r\n            );\r\n        }\r\n    }\r\n\r\n    function attachTextWidth(node) {\r\n        node.data.text_width = text_width(node.data.name, 14, maxLabelWidth);\r\n        if (node.children) node.children.forEach(attachTextWidth);\r\n    }\r\n    attachTextWidth(tree.nodes);\r\n    const sorted_tips = tree\r\n        .getTips()\r\n        .sort((a, b) => b.data.abstract_x - a.data.abstract_x);\r\n    var rightmost = width;\r\n    for (let i = 0; i < sorted_tips.length; i++) {\r\n        let tip = sorted_tips[i];\r\n        rightmost = width - tip.data.text_width;\r\n        let scale = rightmost / tip.data.abstract_x;\r\n        let none_cross = sorted_tips\r\n            .map((tip) => {\r\n                const tip_x = tip.data.abstract_x * scale,\r\n                    text_x = width - tip.data.text_width,\r\n                    this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\r\n                return this_doesnt_cross;\r\n            })\r\n            .every((x) => x);\r\n        if (none_cross) break;\r\n    }\r\n    const x_scale = scaleLinear().domain([0, tree.max_x]).range([0, rightmost]),\r\n        y_scale = scaleLinear()\r\n            .domain([0, tree.max_y])\r\n            .range([props.includeBLAxis ? 60 : 0, height]),\r\n        color_scale = getColorScale(tree, props.highlightBranches);\r\n\r\n    return (\r\n        <div class=\"col-md-12\">\r\n            <SVG width={width + 100} height={height + 100}>\r\n                <g transform={props.transform}>\r\n                    <defs></defs>\r\n                    {/* {props.includeBLAxis ? <g>\r\n      <text\r\n        x={x_scale(tree.max_x/2)}\r\n        y={10}\r\n        alignmentBaseline='middle'\r\n        textAnchor='middle'\r\n        fontFamily='Courier'\r\n      >\r\n        Substitutions per site\r\n      </text>\r\n      <AxisTop\r\n        transform={`translate(0, 40)`}\r\n        scale={x_scale}\r\n      />\r\n    </g> : null } */}\r\n                    {tree.links.map((link) => {\r\n                        const source_id = link.source.unique_id,\r\n                            target_id = link.target.unique_id,\r\n                            key = source_id + \",\" + target_id,\r\n                            show_label =\r\n                                props.internalNodeLabels ||\r\n                                (props.showLabels &&\r\n                                    tree.isLeafNode(link.target));\r\n                        const show_attribute = props.showAttributes;\r\n                        const show_value1 = props.showValue1;\r\n                        const show_value2 = props.showValue2;\r\n                        const show_value3 = props.showValue3;\r\n                        const show_value4 = props.showValue4;\r\n                        const show_value5 = props.showValue5;\r\n                        const round1 = props.round1;\r\n                        const round2 = props.round2;\r\n                        const round3 = props.round3;\r\n                        const round4 = props.round4;\r\n                        const round5 = props.round5;\r\n                        return (\r\n                            <Branch\r\n                                tree={tree}\r\n                                key={key}\r\n                                xScale={x_scale}\r\n                                yScale={y_scale}\r\n                                colorScale={color_scale}\r\n                                link={link}\r\n                                showLabel={show_label}\r\n                                showAttribute={show_attribute}\r\n                                showValue1={show_value1}\r\n                                showValue2={show_value2}\r\n                                showValue3={show_value3}\r\n                                showValue4={show_value4}\r\n                                showValue5={show_value5}\r\n                                round1={round1}\r\n                                round2={round2}\r\n                                round3={round3}\r\n                                round4={round4}\r\n                                round5={round5}\r\n                                maxLabelWidth={maxLabelWidth}\r\n                                width={width}\r\n                                alignTips={props.alignTips}\r\n                                branchStyler={props.branchStyler}\r\n                                labelStyler={props.labelStyler}\r\n                                tooltip={props.tooltip}\r\n                                setTooltip={setTooltip}\r\n                                setIsOpen={setIsOpen}\r\n                                isOpen={props.isOpen}\r\n                            />\r\n                        );\r\n                    })}\r\n                    {tooltip ? (\r\n                        <props.tooltip\r\n                            width={props.width}\r\n                            height={props.height}\r\n                            {...tooltip}\r\n                        />\r\n                    ) : null}{\" \"}\r\n                </g>\r\n            </SVG>\r\n            <div ref={container}>\r\n                {isOpen ? <props.isOpen {...isOpen} /> : null}{\" \"}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nPhylotree.defaultProps = {\r\n    showLabels: true,\r\n    skipPlacement: false,\r\n    maxLabelWidth: 20,\r\n    alignTips: \"left\",\r\n    accessor: default_accessor,\r\n    branchStyler: null,\r\n    labelStyler: null,\r\n    tooltip: null,\r\n    includeBLAxis: false,\r\n};\r\n\r\nexport default Phylotree;\r\nexport { placenodes };\r\n"]},"metadata":{},"sourceType":"module"}