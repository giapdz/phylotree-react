{"ast":null,"code":"var _jsxFileName = \"D:\\\\app test\\\\phylotree-react\\\\src\\\\lib\\\\components\\\\phylotree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { phylotree } from \"phylotree\";\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport _ from \"underscore\";\nimport { max } from \"d3-array\";\nimport Branch from \"./branch\";\nimport text_width from \"./text_width\";\nimport SVG from \"./svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction x_branch_lengths(node, accessor) {\n  if (!node.parent) return 0;\n  const bl = accessor(node);\n  return bl + node.parent.data.abstract_x;\n}\n\nfunction x_no_branch_lengths(node) {\n  return node.parent ? node.parent.data.abstract_x + 1 : 2;\n}\n\nfunction default_accessor(node) {\n  return +node.data.attribute;\n}\n\nfunction sort_nodes(tree, direction) {\n  tree.traverse_and_compute(function (n) {\n    var d = 1;\n\n    if (n.children && n.children.length) {\n      d += max(n.children, function (d) {\n        return d[\"count_depth\"];\n      });\n    }\n\n    n[\"count_depth\"] = d;\n  });\n  const asc = direction === \"ascending\";\n  tree.resortChildren(function (a, b) {\n    return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n  });\n}\n\nfunction toggleCollapse(tree, node) {\n  if (node.collapsed) {\n    node.collapsed = false;\n\n    let unhide = function (n) {\n      if (!tree.isLeafNode(n)) {\n        if (!n.collapsed) {\n          n.children.forEach(unhide);\n        }\n      }\n\n      n.hidden = false;\n    };\n\n    unhide(node);\n  } else {\n    node.collapsed = true;\n  }\n}\n\nfunction placenodes(tree, perform_internal_layout, accessor, sort, collapsed) {\n  accessor = accessor || default_accessor;\n\n  if (sort) {\n    sort_nodes(tree, sort);\n  }\n\n  if (collapsed) {\n    toggleCollapse(tree, collapsed);\n  }\n\n  var current_leaf_height = -1;\n  tree.max_x = 0;\n  const has_branch_lengths = Boolean(accessor(tree.getTips()[0])),\n        x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\n\n  function node_layout(node) {\n    node.data.abstract_x = x_branch_length(node, accessor);\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n\n    if (node.children) {\n      node.data.abstract_y = node.children.map(node_layout).reduce((a, b) => a + b, 0) / node.children.length;\n    } else {\n      current_leaf_height = node.data.abstract_y = current_leaf_height + 1;\n    }\n\n    return node.data.abstract_y;\n  }\n\n  function internal_node_layout(node) {\n    node.data.abstract_x = x_branch_length(node, accessor);\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n\n    if (!tree.isLeafNode(node)) {\n      node.children.forEach(internal_node_layout);\n    }\n\n    if (!node.data.abstract_y && node.data.name !== \"root\") {\n      current_leaf_height = node.data.abstract_y = current_leaf_height + 1;\n      tree.nodeOrder.push(node.data.name);\n    }\n\n    if (node.parent && !node.parent.data.abstract_y && node.data.name !== \"root\") {\n      if (node.parent.data.name !== \"root\") {\n        current_leaf_height = node.parent.data.abstract_y = current_leaf_height + 1;\n        tree.node_order.push(node.parent.data.name);\n      }\n    }\n\n    tree.max_y = Math.max(tree.max_y, current_leaf_height);\n  }\n\n  if (perform_internal_layout) {\n    tree.max_y = 0;\n    tree.node_order = [];\n    internal_node_layout(tree.nodes);\n    const root = tree.getNodeByName(\"root\") || tree.getNodeByName(\"new_root\");\n    root.data.abstract_y = root.children.map(child => child.data.abstract_y).reduce((a, b) => a + b, 0) / root.children.length;\n  } else {\n    node_layout(tree.nodes);\n    tree.max_y = current_leaf_height;\n  }\n}\n\nfunction getColorScale(tree, highlightBranches) {\n  if (!highlightBranches) return null;\n\n  if (typeof highlightBranches === \"boolean\") {\n    return tree.parsed_tags && highlightBranches ? scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) : null;\n  }\n\n  const pairs = _.pairs(highlightBranches);\n\n  return scaleOrdinal().domain(pairs.map(p => p[0])).range(pairs.map(p => p[1]));\n}\n\nfunction Phylotree(props) {\n  _s();\n\n  const [tooltip, setTooltip] = useState(false);\n  const {\n    width,\n    height,\n    maxLabelWidth\n  } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const container = useRef();\n  useEffect(() => {\n    setIsOpen(false);\n    window.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [props.reroot]);\n\n  const handleClickOutside = event => {\n    if (container.current && !container.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  };\n\n  var {\n    tree,\n    newick\n  } = props;\n\n  if (!tree && !newick) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 12\n    }, this);\n  } else if (!tree) {\n    tree = new phylotree(newick);\n\n    if (props.reroot) {\n      var r,\n          node_child = props.reroot.children,\n          node_name = props.reroot.data.name;\n\n      if (node_name === '__reroot_top_clade') {\n        new phylotree(newick);\n      } else {\n        if (node_name !== '') {\n          r = tree.getNodeByName(node_name);\n        } else if (node_child) {\n          for (let n of tree.getNodes()) {\n            if (!tree.isLeafNode(n)) {\n              if (node_name === n.data.name && node_child[0].data.name === n.children[0].data.name && node_child[1].data.name === n.children[1].data.name && node_child[0].data.original_child_order === n.children[0].data.original_child_order && node_child[1].data.original_child_order === n.children[1].data.original_child_order) {\n                r = n;\n              }\n            }\n          } //  r= target_node(node_child,node_name,tree.nodes)\n\n        }\n\n        let newick2 = tree.reroot(r, 1).getNewick();\n        tree = new phylotree(newick2);\n      }\n    }\n  }\n\n  console.log(tree);\n\n  if (!props.skipPlacement) {\n    placenodes(tree, props.internalNodeLabels, props.accessor, props.sort, props.collapsed);\n    console.log(props.collapsed);\n  }\n\n  function attachTextWidth(node) {\n    node.data.text_width = text_width(node.data.name, 14, maxLabelWidth);\n    if (node.children) node.children.forEach(attachTextWidth);\n  }\n\n  attachTextWidth(tree.nodes);\n  const sorted_tips = tree.getTips().sort((a, b) => b.data.abstract_x - a.data.abstract_x);\n  var rightmost = width;\n\n  for (let i = 0; i < sorted_tips.length; i++) {\n    let tip = sorted_tips[i];\n    rightmost = width - tip.data.text_width;\n    let scale = rightmost / tip.data.abstract_x;\n    let none_cross = sorted_tips.map(tip => {\n      const tip_x = tip.data.abstract_x * scale,\n            text_x = width - tip.data.text_width,\n            this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\n      return this_doesnt_cross;\n    }).every(x => x);\n    if (none_cross) break;\n  }\n\n  const x_scale = scaleLinear().domain([0, tree.max_x]).range([0, rightmost]),\n        y_scale = scaleLinear().domain([0, tree.max_y]).range([props.includeBLAxis ? 60 : 0, height]),\n        color_scale = getColorScale(tree, props.highlightBranches);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"col-md-12\",\n    children: [/*#__PURE__*/_jsxDEV(SVG, {\n      width: width + 100,\n      height: height + 100,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: props.transform,\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 3\n        }, this), tree.links.map(link => {\n          const source_id = link.source.unique_id,\n                target_id = link.target.unique_id,\n                key = source_id + \",\" + target_id,\n                show_label = props.internalNodeLabels || props.showLabels && tree.isLeafNode(link.target);\n          const show_attribute = props.showAttributes;\n          const show_value1 = props.showValue1;\n          const show_value2 = props.showValue2;\n          const show_value3 = props.showValue3;\n          const show_value4 = props.showValue4;\n          const show_value5 = props.showValue5;\n          return /*#__PURE__*/_jsxDEV(Branch, {\n            tree: tree,\n            xScale: x_scale,\n            yScale: y_scale,\n            colorScale: color_scale,\n            link: link,\n            showLabel: show_label,\n            showAttribute: show_attribute,\n            showValue1: show_value1,\n            showValue2: show_value2,\n            showValue3: show_value3,\n            showValue4: show_value4,\n            showValue5: show_value5,\n            maxLabelWidth: maxLabelWidth,\n            width: width,\n            alignTips: props.alignTips,\n            branchStyler: props.branchStyler,\n            labelStyler: props.labelStyler,\n            tooltip: props.tooltip,\n            setTooltip: setTooltip,\n            setIsOpen: setIsOpen,\n            isOpen: props.isOpen\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 7\n          }, this);\n        }), tooltip ? /*#__PURE__*/_jsxDEV(props.tooltip, {\n          width: props.width,\n          height: props.height,\n          ...tooltip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 18\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: container,\n      children: isOpen ? /*#__PURE__*/_jsxDEV(props.isOpen, { ...isOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 5\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Phylotree, \"cWymCRzj7fmnIJ4divBVs0y8w5g=\");\n\n_c = Phylotree;\nPhylotree.defaultProps = {\n  showLabels: true,\n  skipPlacement: false,\n  maxLabelWidth: 20,\n  alignTips: \"left\",\n  accessor: default_accessor,\n  branchStyler: null,\n  labelStyler: null,\n  tooltip: null,\n  sort: null,\n  reroot: null,\n  collapsed: null,\n  includeBLAxis: false\n};\nexport default Phylotree;\nexport { placenodes };\n\nvar _c;\n\n$RefreshReg$(_c, \"Phylotree\");","map":{"version":3,"sources":["D:/app test/phylotree-react/src/lib/components/phylotree.jsx"],"names":["React","useState","useRef","useEffect","phylotree","scaleLinear","scaleOrdinal","schemeCategory10","_","max","Branch","text_width","SVG","x_branch_lengths","node","accessor","parent","bl","data","abstract_x","x_no_branch_lengths","default_accessor","attribute","sort_nodes","tree","direction","traverse_and_compute","n","d","children","length","asc","resortChildren","a","b","toggleCollapse","collapsed","unhide","isLeafNode","forEach","hidden","placenodes","perform_internal_layout","sort","current_leaf_height","max_x","has_branch_lengths","Boolean","getTips","x_branch_length","node_layout","Math","abstract_y","map","reduce","internal_node_layout","name","nodeOrder","push","node_order","max_y","nodes","root","getNodeByName","child","getColorScale","highlightBranches","parsed_tags","domain","range","pairs","p","Phylotree","props","tooltip","setTooltip","width","height","maxLabelWidth","isOpen","setIsOpen","container","window","addEventListener","handleClickOutside","removeEventListener","reroot","event","current","contains","target","newick","r","node_child","node_name","getNodes","original_child_order","newick2","getNewick","console","log","skipPlacement","internalNodeLabels","attachTextWidth","sorted_tips","rightmost","i","tip","scale","none_cross","tip_x","text_x","this_doesnt_cross","floor","ceil","every","x","x_scale","y_scale","includeBLAxis","color_scale","transform","links","link","source_id","source","unique_id","target_id","key","show_label","showLabels","show_attribute","showAttributes","show_value1","showValue1","show_value2","showValue2","show_value3","showValue3","show_value4","showValue4","show_value5","showValue5","alignTips","branchStyler","labelStyler","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef , useEffect } from \"react\";\r\nimport { phylotree } from \"phylotree\";\r\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport _ from \"underscore\";\r\nimport { max } from \"d3-array\";\r\n\r\nimport Branch from \"./branch\";\r\nimport text_width from \"./text_width\";\r\nimport SVG from \"./svg\";\r\n\r\n\r\nfunction x_branch_lengths(node, accessor) {\r\n  if (!node.parent) return 0;\r\n  const bl = accessor(node);\r\n  return  bl + node.parent.data.abstract_x;\r\n}\r\n\r\nfunction x_no_branch_lengths(node) {\r\n  return node.parent ? node.parent.data.abstract_x + 1 : 2;\r\n}\r\n\r\nfunction default_accessor(node){\r\n  return +node.data.attribute;\r\n}\r\n\r\nfunction sort_nodes (tree, direction) {\r\n  tree.traverse_and_compute (function (n) {\r\n    var d = 1;\r\n    if (n.children && n.children.length) {\r\n      d += max (n.children, function (d) { return d[\"count_depth\"];});\r\n    }\r\n    n[\"count_depth\"] = d;\r\n  });\r\n  const asc = direction === \"ascending\";\r\n  tree.resortChildren (function (a,b) {\r\n    return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\r\n  });\r\n}\r\nfunction toggleCollapse(tree,node) {\r\n  if (node.collapsed) {\r\n    node.collapsed = false;\r\n\r\n    let unhide = function(n) {\r\n      if (!tree.isLeafNode(n)) {\r\n        if (!n.collapsed) {\r\n          n.children.forEach(unhide);\r\n        }\r\n      }\r\n      n.hidden = false;\r\n    };\r\n\r\n    unhide(node);\r\n  } else {\r\n    node.collapsed = true;\r\n  }\r\n\r\n}\r\n\r\nfunction placenodes(tree, perform_internal_layout, accessor, sort, collapsed) {\r\n  accessor = accessor || default_accessor;\r\n  if(sort) {\r\n    sort_nodes(tree, sort);\r\n  }\r\n  if(collapsed) {\r\n    toggleCollapse(tree,collapsed)\r\n  }\r\n  var current_leaf_height = -1;\r\n    \r\n  tree.max_x = 0;\r\n  const has_branch_lengths = Boolean(accessor(tree.getTips()[0])),\r\n    x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\r\n  function node_layout(node) {\r\n   \r\n    node.data.abstract_x = x_branch_length(node, accessor);\r\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n    if(node.children) {\r\n      node.data.abstract_y = node.children.map(node_layout)\r\n        .reduce( (a,b) => a + b, 0) / node.children.length;\r\n    } else {\r\n      current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n    }\r\n    return node.data.abstract_y;\r\n  }\r\n\r\n  function internal_node_layout(node) { \r\n    \r\n    node.data.abstract_x =x_branch_length(node, accessor);\r\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n    if(!tree.isLeafNode(node)) {\r\n      node.children.forEach(internal_node_layout);\r\n    }\r\n    if(!node.data.abstract_y && node.data.name !== \"root\") {\r\n      current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n      tree.nodeOrder.push(node.data.name);\r\n    }\r\n    if(node.parent && !node.parent.data.abstract_y && (node.data.name !== \"root\" )) {\r\n      if(node.parent.data.name !== \"root\") {\r\n        current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\r\n        tree.node_order.push(node.parent.data.name);\r\n      } \r\n    }\r\n    tree.max_y = Math.max(tree.max_y, current_leaf_height);\r\n  }\r\n\r\n  if(perform_internal_layout) {\r\n    tree.max_y = 0;\r\n    tree.node_order = [];\r\n    internal_node_layout(tree.nodes);\r\n    const root = tree.getNodeByName(\"root\") || tree.getNodeByName(\"new_root\");\r\n    root.data.abstract_y = root.children.map(child => child.data.abstract_y)\r\n      .reduce((a,b)=>a+b, 0) / root.children.length;\r\n  } else {\r\n    node_layout(tree.nodes);\r\n    tree.max_y = current_leaf_height;\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction getColorScale(tree, highlightBranches) {\r\n  if(!highlightBranches) return null;\r\n  if(typeof highlightBranches === \"boolean\") {\r\n    return tree.parsed_tags && highlightBranches ? \r\n      scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) :\r\n      null;\r\n  }\r\n  const pairs = _.pairs(highlightBranches);\r\n  return scaleOrdinal()\r\n    .domain(pairs.map(p => p[0]))\r\n    .range(pairs.map(p => p[1]));\r\n}\r\n\r\n\r\nfunction Phylotree(props) {\r\n  const [tooltip, setTooltip] = useState(false);\r\n  const { width, height, maxLabelWidth } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const container = useRef();\r\n\r\n  useEffect (()=>{\r\n   \r\n      setIsOpen(false)\r\n    \r\n    window.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n    window.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }\r\n  },[props.reroot])\r\n  const handleClickOutside = (event) => {\r\n    if (\r\n      container.current &&\r\n      !container.current.contains(event.target)\r\n    ) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  var{ tree, newick } = props;\r\n  if (!tree && !newick) {\r\n    return <g />;\r\n  } else if(!tree) {\r\n    tree = new phylotree(newick);\r\n    if( props.reroot) {\r\n      \r\n      var r,\r\n      node_child = props.reroot.children,\r\n      node_name = props.reroot.data.name;\r\n      if(node_name==='__reroot_top_clade') {\r\n       new phylotree(newick)\r\n      }\r\n      else { \r\n        if(node_name!=='') {\r\n          r = tree.getNodeByName(node_name)\r\n        }\r\n        else if(node_child) {\r\n        for( let n of tree.getNodes()) {\r\n          if(!tree.isLeafNode(n)) {\r\n          if(node_name === n.data.name && node_child[0].data.name===n.children[0].data.name && node_child[1].data.name===n.children[1].data.name\r\n            && node_child[0].data.original_child_order===n.children[0].data.original_child_order && node_child[1].data.original_child_order===n.children[1].data.original_child_order  ) {\r\n           r=n;\r\n        }\r\n      }\r\n       \r\n      }\r\n      //  r= target_node(node_child,node_name,tree.nodes)\r\n      } \r\n      let newick2 =tree.reroot(r,1).getNewick()\r\n      \r\n        tree = new phylotree(newick2);\r\n     \r\n    }\r\n  }\r\n  }\r\n  console.log(tree)\r\n    \r\n    if(!props.skipPlacement) {\r\n      placenodes(tree, props.internalNodeLabels, props.accessor, props.sort, props.collapsed);\r\n      console.log(props.collapsed)\r\n    }\r\n    function attachTextWidth(node) {\r\n      node.data.text_width = text_width(node.data.name, 14, maxLabelWidth);\r\n      if(node.children) node.children.forEach(attachTextWidth);\r\n    }\r\n    attachTextWidth(tree.nodes);\r\n    const sorted_tips = tree.getTips().sort((a,b) => (\r\n        b.data.abstract_x - a.data.abstract_x\r\n      ));\r\n    var rightmost = width;\r\n      for(let i=0; i < sorted_tips.length; i++) {\r\n        let tip = sorted_tips[i];\r\n        rightmost = width - tip.data.text_width;\r\n        let scale = rightmost / tip.data.abstract_x;\r\n        let none_cross = sorted_tips.map(tip => {\r\n          const tip_x = tip.data.abstract_x * scale,\r\n            text_x = width - tip.data.text_width,\r\n            this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\r\n          return this_doesnt_cross;\r\n        }).every(x => x);\r\n        if(none_cross) break;\r\n      \r\n    }\r\n    const x_scale = scaleLinear()\r\n        .domain([0, tree.max_x])\r\n        .range([0, rightmost]),\r\n      y_scale = scaleLinear()\r\n        .domain([0, tree.max_y])\r\n        .range([props.includeBLAxis ? 60 : 0, height]),\r\n      color_scale = getColorScale(tree, props.highlightBranches);\r\n\r\n  return (\r\n  <div class= \"col-md-12\">\r\n    <SVG width={width+100} height={height+100}  >\r\n   \r\n  \r\n  <g transform={props.transform}>\r\n  <defs></defs>\r\n    {/* {props.includeBLAxis ? <g>\r\n      <text\r\n        x={x_scale(tree.max_x/2)}\r\n        y={10}\r\n        alignmentBaseline='middle'\r\n        textAnchor='middle'\r\n        fontFamily='Courier'\r\n      >\r\n        Substitutions per site\r\n      </text>\r\n      <AxisTop\r\n        transform={`translate(0, 40)`}\r\n        scale={x_scale}\r\n      />\r\n    </g> : null } */}\r\n    \r\n    {tree.links.map(link => {\r\n      const source_id = link.source.unique_id,\r\n        target_id = link.target.unique_id,\r\n        key = source_id + \",\" + target_id,\r\n       show_label = props.internalNodeLabels ||\r\n          (props.showLabels && tree.isLeafNode(link.target));\r\n      const  show_attribute = props.showAttributes;\r\n      const show_value1 = props.showValue1;\r\n      const show_value2 = props.showValue2;\r\n      const show_value3 = props.showValue3;\r\n      const show_value4 = props.showValue4;\r\n      const show_value5 = props.showValue5;\r\n      return(\r\n      <Branch\r\n        tree={tree}\r\n        key={key}\r\n        xScale={x_scale}\r\n        yScale={y_scale}\r\n        colorScale={color_scale}\r\n        link={link}\r\n        showLabel={show_label}\r\n        showAttribute={show_attribute}\r\n        showValue1={show_value1}\r\n        showValue2={show_value2}\r\n        showValue3={show_value3}\r\n        showValue4={show_value4}\r\n        showValue5={show_value5}\r\n        maxLabelWidth={maxLabelWidth}\r\n        width={width}\r\n        alignTips={props.alignTips}\r\n        branchStyler={props.branchStyler}\r\n        labelStyler={props.labelStyler}\r\n        tooltip={props.tooltip}\r\n        setTooltip={setTooltip}\r\n        setIsOpen={setIsOpen}\r\n        isOpen ={props.isOpen}\r\n      />\r\n     );\r\n    }) } \r\n    \r\n    { tooltip ? (<props.tooltip\r\n      width={props.width}\r\n      height={props.height}\r\n      {...tooltip}\r\n    />\r\n    ) : null }\r\n  </g>\r\n  </SVG>\r\n  <div ref={container}>\r\n  { isOpen ? (\r\n    <props.isOpen \r\n    {...isOpen}\r\n    />\r\n  ) : null}\r\n  </div>\r\n  </div>\r\n  );\r\n}\r\nPhylotree.defaultProps = {\r\n  showLabels: true,\r\n  skipPlacement: false,\r\n  maxLabelWidth: 20,\r\n  alignTips: \"left\",\r\n  accessor: default_accessor,\r\n  branchStyler: null,\r\n  labelStyler: null,\r\n  tooltip: null,\r\n  sort: null,\r\n  reroot: null,\r\n  collapsed: null,\r\n  includeBLAxis: false\r\n};\r\n\r\nexport default Phylotree;\r\nexport {\r\n  placenodes\r\n};\r\n"]},"metadata":{},"sourceType":"module"}