{"ast":null,"code":"var _jsxFileName = \"D:\\\\app test\\\\phylotree-react\\\\src\\\\components\\\\phylotree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { phylotree } from \"phylotree\";\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport _ from \"underscore\";\nimport * as d3 from 'd3';\nimport { max } from \"d3-array\";\nimport Branch from \"./branch.jsx\";\nimport text_width from \"./text_width\";\nimport SVG from \"./svg.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nfunction x_branch_lengths(node, accessor) {\n  if (!node.parent) return 0;\n  const bl = accessor(node);\n  return bl + node.parent.data.abstract_x;\n}\n\nfunction x_no_branch_lengths(node) {\n  return node.parent ? node.parent.data.abstract_x + 1 : 2;\n}\n\nfunction default_accessor(node) {\n  return +node.data.attribute;\n}\n\nfunction sort_nodes(tree, direction) {\n  tree.traverse_and_compute(function (n) {\n    var d = 1;\n\n    if (n.children && n.children.length) {\n      d += max(n.children, function (d) {\n        return d[\"count_depth\"];\n      });\n    }\n\n    n[\"count_depth\"] = d;\n  });\n  const asc = direction === \"ascending\";\n  tree.resortChildren(function (a, b) {\n    return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n  });\n} // function re_root(tree, node) {\n//   tree =  tree.reroot(node)\n//   // placenodes(tree, props.internalNodeLabels, default_accessor, props.sort); \n//     tree = new phylotree(tree.getNewick());\n// }\n// // function swap_nodes (tree, node) {\n//   const root = tree.get_node_by_name(node);\n//   root.children.traverse_and_compute (function (n) {\n//     var d = 1;\n//     if (n.children && n.children.length) {\n//       d += max (n.children, function (d) { return d[\"count_depth\"];});\n//     }\n//     n[\"count_depth\"] = d;\n//   });\n//   const asc = direction === \"ascending\";\n//   root.children.resort_children (function (a,b) {\n//     return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n//   });\n// }\n\n\nfunction placenodes(tree, perform_internal_layout, accessor, sort) {\n  accessor = accessor || default_accessor;\n\n  if (sort) {\n    sort_nodes(tree, sort);\n  } // if(reroot) {\n  //   re_root(tree, reroot) \n  // }\n  //   var current_leaf_height = -1,\n  //     unique_id = 0;\n  //   tree.max_x = 0;\n  //   const has_branch_lengths = Boolean(accessor(tree.get_tips()[0])),\n  //     x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\n  //   function node_layout(node) {\n  //     if(!node.unique_id) {\n  //       unique_id = node.unique_id = unique_id + 1;\n  //     }\n  //     node.data.abstract_x = x_branch_length(node, accessor);\n  //     tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n  //     if(node.children) {\n  //       node.data.abstract_y = node.children.map(node_layout)\n  //         .reduce( (a,b) => a + b, 0) / node.children.length;\n  //     } else {\n  //       current_leaf_height = node.data.abstract_y = current_leaf_height+1;\n  //     }\n  //     return node.data.abstract_y;\n  //   }\n  //   function internal_node_layout(node) {\n  //     unique_id = node.unique_id = unique_id + 1;\n  //     node.data.abstract_x = x_branch_length(node, accessor);\n  //     tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n  //     if(!tree.is_leafnode(node)) {\n  //       node.children.forEach(internal_node_layout);\n  //     }\n  //     if(!node.data.abstract_y && (node.data.name !== \"new_root\")) {\n  //       current_leaf_height = node.data.abstract_y = current_leaf_height+1;\n  //       tree.node_order.push(node.data.name);\n  //     }\n  //     if(node.parent && !node.parent.data.abstract_y && (node.data.name !== \"new_root\")) {\n  //       if(node.data.name !== \"new_root\") {\n  //         current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\n  //         tree.node_order.push(node.parent.data.name);\n  //       } \n  //     }\n  //     tree.max_y = Math.max(tree.max_y, current_leaf_height);\n  //   }\n  //   if(perform_internal_layout) {\n  //     tree.max_y = 0;\n  //     tree.node_order = [];\n  //     internal_node_layout(tree.nodes);\n  //     const root = tree.get_node_by_name(\"new_root\");\n  //     root.data.abstract_y = root.children.map(child => child.data.abstract_y)\n  //       .reduce((a,b)=>a+b, 0) / root.children.length;\n  //   } else {\n  //     node_layout(tree.nodes);\n  //     tree.max_y = current_leaf_height;\n  //   }\n  // }\n  // else {\n\n\n  var current_leaf_height = -1; // unique_id = 0;\n\n  tree.max_x = 0;\n  const has_branch_lengths = Boolean(accessor(tree.getTips()[0])),\n        x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\n\n  function node_layout(node) {\n    // if(!node.unique_id) {\n    //   unique_id = node.unique_id = unique_id + 1;\n    // }\n    node.data.abstract_x = x_branch_length(node, accessor);\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n\n    if (node.children) {\n      node.data.abstract_y = node.children.map(node_layout).reduce((a, b) => a + b, 0) / node.children.length;\n    } else {\n      current_leaf_height = node.data.abstract_y = current_leaf_height + 1;\n    }\n\n    return node.data.abstract_y;\n  }\n\n  function internal_node_layout(node) {\n    // unique_id = node.unique_id = unique_id + 1;\n    node.data.abstract_x = x_branch_length(node, accessor);\n    tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n\n    if (!tree.isLeafNode(node)) {\n      node.children.forEach(internal_node_layout);\n    }\n\n    if (!node.data.abstract_y && node.data.name !== \"root\" && node.data.name !== \"new_root\") {\n      current_leaf_height = node.data.abstract_y = current_leaf_height + 1;\n      tree.node_order.push(node.data.name);\n    }\n\n    if (node.parent && !node.parent.data.abstract_y && node.data.name !== \"root\" && node.data.name !== \"new_root\") {\n      if (node.parent.data.name !== \"root\" && node.parent.data.name !== \"new_root\") {\n        current_leaf_height = node.parent.data.abstract_y = current_leaf_height + 1;\n        tree.node_order.push(node.parent.data.name);\n      }\n    }\n\n    tree.max_y = Math.max(tree.max_y, current_leaf_height);\n  }\n\n  if (perform_internal_layout) {\n    tree.max_y = 0;\n    tree.node_order = [];\n    internal_node_layout(tree.nodes);\n    const root = tree.getNodeByName(\"root\") && tree.getNodeByName(\"new_root\");\n    root.data.abstract_y = root.children.map(child => child.data.abstract_y).reduce((a, b) => a + b, 0) / root.children.length;\n  } else {\n    node_layout(tree.nodes);\n    tree.max_y = current_leaf_height; // }\n  }\n}\n\nfunction getColorScale(tree, highlightBranches) {\n  if (!highlightBranches) return null;\n\n  if (typeof highlightBranches === \"boolean\") {\n    return tree.parsed_tags && highlightBranches ? scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) : null;\n  }\n\n  const pairs = _.pairs(highlightBranches);\n\n  return scaleOrdinal().domain(pairs.map(p => p[0])).range(pairs.map(p => p[1]));\n} //  function toggleCollapse(node) {\n//     if (node.collapsed) {\n//       node.collapsed = false;\n//       let unhide = function(n) {\n//         if (!isLeafNode(n)) {\n//           if (!n.collapsed) {\n//             n.children.forEach(unhide);\n//           }\n//         }\n//         n.hidden = false;\n//       };\n//       unhide(node);\n//     } else {\n//       node.collapsed = true;\n//     }\n//     this.placenodes();\n//     return this;\n//   }\n\n\nfunction Phylotree(props) {\n  _s();\n\n  const [tooltip, setTooltip] = useState(false);\n  const {\n    width,\n    height,\n    maxLabelWidth\n  } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const container = useRef();\n  useEffect(() => {\n    window.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleClickOutside = event => {\n    if (container.current && !container.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  };\n\n  var d3__namespace = _interopNamespace(d3);\n\n  var ___namespace = _interopNamespace(_);\n\n  var {\n    tree,\n    newick\n  } = props;\n\n  if (!tree && !newick) {\n    return /*#__PURE__*/_jsxDEV(\"g\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 12\n    }, this);\n  } else if (!tree) {\n    tree = new phylotree(newick);\n    var l = tree.links.length;\n\n    if (props.reroot) {\n      var node = props.reroot;\n      var node_parent = props.reroot_parent; // console.log(props.reroot)\n\n      if (node.parent) {\n        var new_json = d3__namespace.hierarchy({\n          name: \"new_root\"\n        });\n        new_json.children = [node.copy()];\n        let remove_me = node,\n            current_node = node_parent; //   stashed_bl = ___namespace.noop();\n\n        var remove_idx;\n\n        if (current_node.parent) {\n          new_json.children.push(current_node);\n\n          while (current_node.parent) {\n            remove_idx = current_node.children.indexOf(remove_me);\n\n            if (current_node.parent.parent) {\n              current_node.children.splice(remove_idx, 1, current_node.parent);\n            } else {\n              current_node.children.splice(remove_idx, 1);\n            }\n\n            remove_me = current_node;\n            current_node = current_node.parent;\n          }\n\n          remove_idx = current_node.children.indexOf(remove_me);\n          current_node.children.splice(remove_idx, 1);\n        } else {\n          remove_idx = current_node.children.indexOf(remove_me);\n          current_node.children.splice(remove_idx, 1);\n          remove_me = new_json;\n        } // current_node is now old root, and remove_me is the root child we came up\n        // the tree through\n\n\n        if (current_node.children.length === 1) {\n          remove_me.children = remove_me.children.concat(current_node.children);\n        } else {\n          let new_node = new d3__namespace.hierarchy({\n            name: \"\"\n          });\n\n          ___namespace.extendOwn(new_json.children[0], new_json);\n\n          new_node.children = current_node.children.map(function (n) {\n            n.parent = new_node;\n            return n;\n          });\n          new_node.parent = remove_me;\n          remove_me.children.push(new_node);\n        } //  console.log(remove_me)\n\n      } //  tree.update(new_json) \n\n\n      const nodes = tree.getNodeByName(node.data.name);\n      console.log(nodes); //  console.log(node)\n      // tree.reroot(nodes, 1)\n      // if (tree.links.length===l) {\n\n      var newick2 = tree.getNewick(); //  newick2.replace(\"__reroot_top_clade\",\"\");\n\n      tree = new phylotree(newick2.replace(\"__reroot_top_clade\", \"\")); //  console.log(newick2.replace(\"__reroot_top_clade\",\"\"));\n      //   }\n      //    if(newick2.includes(\"__reroot_top_clade\")) {\n      //      newick2.replace(\"__reroot_top_clade\", \"\")\n      //   //   console.log(tree.getNewick())\n      // }\n    }\n  }\n\n  console.log(tree);\n\n  if (!props.skipPlacement) {\n    placenodes(tree, props.internalNodeLabels, props.accessor, props.sort);\n  }\n\n  function attachTextWidth(node) {\n    node.data.text_width = text_width(node.data.name, 12, maxLabelWidth);\n    if (node.children) node.children.forEach(attachTextWidth);\n  }\n\n  attachTextWidth(tree.nodes);\n  const sorted_tips = tree.getTips().sort((a, b) => b.data.abstract_x - a.data.abstract_x);\n  var rightmost;\n\n  for (let i = 0; i < sorted_tips.length; i++) {\n    let tip = sorted_tips[i];\n    rightmost = width - tip.data.text_width;\n    let scale = rightmost / tip.data.abstract_x;\n    let none_cross = sorted_tips.map(tip => {\n      const tip_x = tip.data.abstract_x * scale,\n            text_x = width - tip.data.text_width,\n            this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\n      return this_doesnt_cross;\n    }).every(x => x);\n    if (none_cross) break;\n  }\n\n  const x_scale = scaleLinear().domain([0, tree.max_x]).range([0, rightmost]),\n        y_scale = scaleLinear().domain([0, tree.max_y]).range([props.includeBLAxis ? 60 : 0, height]),\n        color_scale = getColorScale(tree, props.highlightBranches);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"row\",\n    class: \"col-md-12\",\n    children: [/*#__PURE__*/_jsxDEV(SVG, {\n      width: width + 100,\n      height: height + 100,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: props.transform,\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 3\n        }, this), tree.links.map(link => {\n          // const source_id = link.source.unique_id,\n          //   target_id = link.target.unique_id,\n          //   key = source_id + \",\" + target_id,\n          const show_label = props.internalNodeLabels || props.showLabels && tree.isLeafNode(link.target);\n          const show_attribute = props.showAttributes;\n          const show_value1 = props.showValue1;\n          const show_value2 = props.showValue2;\n          const show_value3 = props.showValue3;\n          const show_value4 = props.showValue4;\n          const show_value5 = props.showValue5;\n          return /*#__PURE__*/_jsxDEV(Branch, {\n            tree: tree,\n            xScale: x_scale,\n            yScale: y_scale,\n            colorScale: color_scale,\n            link: link,\n            showLabel: show_label,\n            showAttribute: show_attribute,\n            showValue1: show_value1,\n            showValue2: show_value2,\n            showValue3: show_value3,\n            showValue4: show_value4,\n            showValue5: show_value5,\n            maxLabelWidth: maxLabelWidth,\n            width: width,\n            alignTips: props.alignTips,\n            branchStyler: props.branchStyler,\n            labelStyler: props.labelStyler,\n            tooltip: props.tooltip,\n            setTooltip: setTooltip,\n            setIsOpen: setIsOpen,\n            isOpen: props.isOpen\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 7\n          }, this);\n        }), tooltip ? /*#__PURE__*/_jsxDEV(props.tooltip, {\n          width: props.width,\n          height: props.height,\n          ...tooltip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 18\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: container,\n      children: isOpen ? /*#__PURE__*/_jsxDEV(props.isOpen, { ...isOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 5\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Phylotree, \"cWymCRzj7fmnIJ4divBVs0y8w5g=\");\n\n_c = Phylotree;\nPhylotree.defaultProps = {\n  width: 500,\n  height: 500,\n  showLabels: true,\n  showAttributes: false,\n  showValue1: false,\n  showValue2: false,\n  showValue3: false,\n  showValue4: false,\n  showValue5: false,\n  skipPlacement: false,\n  maxLabelWidth: 20,\n  alignTips: \"right\",\n  accessor: default_accessor,\n  branchStyler: null,\n  labelStyler: null,\n  tooltip: null,\n  isOpen: null,\n  sort: null,\n  reroot: null,\n  includeBLAxis: true\n};\nexport default Phylotree;\nexport { placenodes };\n\nvar _c;\n\n$RefreshReg$(_c, \"Phylotree\");","map":{"version":3,"sources":["D:/app test/phylotree-react/src/components/phylotree.jsx"],"names":["React","useState","useRef","useEffect","phylotree","scaleLinear","scaleOrdinal","schemeCategory10","_","d3","max","Branch","text_width","SVG","_interopNamespace","e","__esModule","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","x_branch_lengths","node","accessor","parent","bl","data","abstract_x","x_no_branch_lengths","default_accessor","attribute","sort_nodes","tree","direction","traverse_and_compute","children","length","asc","resortChildren","a","b","placenodes","perform_internal_layout","sort","current_leaf_height","max_x","has_branch_lengths","Boolean","getTips","x_branch_length","node_layout","Math","abstract_y","map","reduce","internal_node_layout","isLeafNode","name","node_order","push","max_y","nodes","root","getNodeByName","child","getColorScale","highlightBranches","parsed_tags","domain","range","pairs","p","Phylotree","props","tooltip","setTooltip","width","height","maxLabelWidth","isOpen","setIsOpen","container","window","addEventListener","handleClickOutside","removeEventListener","event","current","contains","target","d3__namespace","___namespace","newick","l","links","reroot","node_parent","reroot_parent","new_json","hierarchy","copy","remove_me","current_node","remove_idx","indexOf","splice","concat","new_node","extendOwn","console","log","newick2","getNewick","replace","skipPlacement","internalNodeLabels","attachTextWidth","sorted_tips","rightmost","i","tip","scale","none_cross","tip_x","text_x","this_doesnt_cross","floor","ceil","every","x","x_scale","y_scale","includeBLAxis","color_scale","transform","link","show_label","showLabels","show_attribute","showAttributes","show_value1","showValue1","show_value2","showValue2","show_value3","showValue3","show_value4","showValue4","show_value5","showValue5","alignTips","branchStyler","labelStyler","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef , useEffect } from \"react\";\r\nimport { phylotree } from \"phylotree\";\r\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport _ from \"underscore\";\r\nimport * as d3 from 'd3';\r\nimport { max } from \"d3-array\";\r\n\r\nimport Branch from \"./branch.jsx\";\r\nimport text_width from \"./text_width\";\r\nimport SVG from \"./svg.js\";\r\n\r\nfunction _interopNamespace(e) {\r\n  if (e && e.__esModule) return e;\r\n  var n = Object.create(null);\r\n  if (e) {\r\n    Object.keys(e).forEach(function (k) {\r\n      if (k !== 'default') {\r\n        var d = Object.getOwnPropertyDescriptor(e, k);\r\n        Object.defineProperty(n, k, d.get ? d : {\r\n          enumerable: true,\r\n          get: function () {\r\n            return e[k];\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  n['default'] = e;\r\n  return Object.freeze(n);\r\n}\r\n\r\n\r\nfunction x_branch_lengths(node, accessor) {\r\n  if (!node.parent) return 0;\r\n  const bl = accessor(node);\r\n  return  bl + node.parent.data.abstract_x;\r\n}\r\n\r\nfunction x_no_branch_lengths(node) {\r\n  return node.parent ? node.parent.data.abstract_x + 1 : 2;\r\n}\r\n\r\nfunction default_accessor(node){\r\n  return +node.data.attribute;\r\n}\r\n\r\nfunction sort_nodes (tree, direction) {\r\n  tree.traverse_and_compute (function (n) {\r\n    var d = 1;\r\n    if (n.children && n.children.length) {\r\n      d += max (n.children, function (d) { return d[\"count_depth\"];});\r\n    }\r\n    n[\"count_depth\"] = d;\r\n  });\r\n  const asc = direction === \"ascending\";\r\n  tree.resortChildren (function (a,b) {\r\n    return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\r\n  });\r\n}\r\n// function re_root(tree, node) {\r\n//   tree =  tree.reroot(node)\r\n    \r\n//   // placenodes(tree, props.internalNodeLabels, default_accessor, props.sort); \r\n//     tree = new phylotree(tree.getNewick());\r\n// }\r\n// // function swap_nodes (tree, node) {\r\n//   const root = tree.get_node_by_name(node);\r\n//   root.children.traverse_and_compute (function (n) {\r\n//     var d = 1;\r\n//     if (n.children && n.children.length) {\r\n//       d += max (n.children, function (d) { return d[\"count_depth\"];});\r\n//     }\r\n//     n[\"count_depth\"] = d;\r\n//   });\r\n//   const asc = direction === \"ascending\";\r\n//   root.children.resort_children (function (a,b) {\r\n//     return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\r\n//   });\r\n// }\r\n\r\n\r\nfunction placenodes(tree, perform_internal_layout, accessor, sort) {\r\n  accessor = accessor || default_accessor;\r\n  if(sort) {\r\n    sort_nodes(tree, sort);\r\n  }\r\n  // if(reroot) {\r\n  //   re_root(tree, reroot) \r\n  // }\r\n//   var current_leaf_height = -1,\r\n//     unique_id = 0;\r\n//   tree.max_x = 0;\r\n//   const has_branch_lengths = Boolean(accessor(tree.get_tips()[0])),\r\n//     x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\r\n//   function node_layout(node) {\r\n//     if(!node.unique_id) {\r\n//       unique_id = node.unique_id = unique_id + 1;\r\n//     }\r\n//     node.data.abstract_x = x_branch_length(node, accessor);\r\n//     tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n//     if(node.children) {\r\n//       node.data.abstract_y = node.children.map(node_layout)\r\n//         .reduce( (a,b) => a + b, 0) / node.children.length;\r\n//     } else {\r\n//       current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n//     }\r\n//     return node.data.abstract_y;\r\n//   }\r\n\r\n//   function internal_node_layout(node) {\r\n//     unique_id = node.unique_id = unique_id + 1;\r\n//     node.data.abstract_x = x_branch_length(node, accessor);\r\n//     tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n//     if(!tree.is_leafnode(node)) {\r\n//       node.children.forEach(internal_node_layout);\r\n//     }\r\n//     if(!node.data.abstract_y && (node.data.name !== \"new_root\")) {\r\n//       current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n//       tree.node_order.push(node.data.name);\r\n//     }\r\n//     if(node.parent && !node.parent.data.abstract_y && (node.data.name !== \"new_root\")) {\r\n//       if(node.data.name !== \"new_root\") {\r\n//         current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\r\n//         tree.node_order.push(node.parent.data.name);\r\n//       } \r\n//     }\r\n//     tree.max_y = Math.max(tree.max_y, current_leaf_height);\r\n//   }\r\n\r\n//   if(perform_internal_layout) {\r\n//     tree.max_y = 0;\r\n//     tree.node_order = [];\r\n//     internal_node_layout(tree.nodes);\r\n//     const root = tree.get_node_by_name(\"new_root\");\r\n//     root.data.abstract_y = root.children.map(child => child.data.abstract_y)\r\n//       .reduce((a,b)=>a+b, 0) / root.children.length;\r\n//   } else {\r\n//     node_layout(tree.nodes);\r\n//     tree.max_y = current_leaf_height;\r\n//   }\r\n// }\r\n// else {\r\nvar current_leaf_height = -1;\r\n// unique_id = 0;\r\ntree.max_x = 0;\r\nconst has_branch_lengths = Boolean(accessor(tree.getTips()[0])),\r\nx_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\r\nfunction node_layout(node) {\r\n// if(!node.unique_id) {\r\n//   unique_id = node.unique_id = unique_id + 1;\r\n// }\r\nnode.data.abstract_x = x_branch_length(node, accessor);\r\ntree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\nif(node.children) {\r\n  node.data.abstract_y = node.children.map(node_layout)\r\n    .reduce( (a,b) => a + b, 0) / node.children.length;\r\n} else {\r\n  current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n}\r\nreturn node.data.abstract_y;\r\n}\r\n\r\nfunction internal_node_layout(node) {\r\n// unique_id = node.unique_id = unique_id + 1;\r\nnode.data.abstract_x = x_branch_length(node, accessor);\r\ntree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\nif(!tree.isLeafNode(node)) {\r\n  node.children.forEach(internal_node_layout);\r\n}\r\nif(!node.data.abstract_y && (node.data.name !== \"root\" && node.data.name !== \"new_root\" )) {\r\n  current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n  tree.node_order.push(node.data.name);\r\n}\r\nif(node.parent && !node.parent.data.abstract_y && (node.data.name !== \"root\" && node.data.name !== \"new_root\")) {\r\n  if(node.parent.data.name !== \"root\" && node.parent.data.name !== \"new_root\") {\r\n    current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\r\n    tree.node_order.push(node.parent.data.name);\r\n  } \r\n}\r\ntree.max_y = Math.max(tree.max_y, current_leaf_height);\r\n}\r\n\r\nif(perform_internal_layout) {\r\ntree.max_y = 0;\r\ntree.node_order = [];\r\ninternal_node_layout(tree.nodes);\r\nconst root = tree.getNodeByName(\"root\") && tree.getNodeByName(\"new_root\")\r\nroot.data.abstract_y = root.children.map(child => child.data.abstract_y)\r\n  .reduce((a,b)=>a+b, 0) / root.children.length;\r\n} else {\r\nnode_layout(tree.nodes);\r\ntree.max_y = current_leaf_height;\r\n// }\r\n}\r\n}\r\n\r\n\r\nfunction getColorScale(tree, highlightBranches) {\r\n  if(!highlightBranches) return null;\r\n  if(typeof highlightBranches === \"boolean\") {\r\n    return tree.parsed_tags && highlightBranches ? \r\n      scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) :\r\n      null;\r\n  }\r\n  const pairs = _.pairs(highlightBranches);\r\n  return scaleOrdinal()\r\n    .domain(pairs.map(p => p[0]))\r\n    .range(pairs.map(p => p[1]));\r\n}\r\n\r\n//  function toggleCollapse(node) {\r\n//     if (node.collapsed) {\r\n//       node.collapsed = false;\r\n\r\n//       let unhide = function(n) {\r\n//         if (!isLeafNode(n)) {\r\n//           if (!n.collapsed) {\r\n//             n.children.forEach(unhide);\r\n//           }\r\n//         }\r\n//         n.hidden = false;\r\n//       };\r\n\r\n//       unhide(node);\r\n//     } else {\r\n//       node.collapsed = true;\r\n//     }\r\n\r\n//     this.placenodes();\r\n//     return this;\r\n//   }\r\nfunction Phylotree(props) {\r\n  const [tooltip, setTooltip] = useState(false);\r\n  const { width, height, maxLabelWidth } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const container = useRef();\r\n\r\n  useEffect (()=>{\r\n    window.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n    window.removeEventListener(\"mousedown\", handleClickOutside);\r\n    }\r\n  },[])\r\n  const handleClickOutside = (event) => {\r\n    if (\r\n      container.current &&\r\n      !container.current.contains(event.target)\r\n    ) {\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n  var d3__namespace = _interopNamespace(d3);\r\n  var ___namespace = _interopNamespace(_);\r\n  var{ tree, newick } = props;\r\n  if (!tree && !newick) {\r\n    return <g />;\r\n  } else if(!tree) {\r\n    tree = new phylotree(newick);\r\n    var l = tree.links.length\r\n    if( props.reroot) {\r\n      var node = props.reroot;\r\n      var node_parent = props.reroot_parent;\r\n      // console.log(props.reroot)\r\n      if (node.parent) {\r\n  \r\n        var new_json = d3__namespace.hierarchy({\r\n          name: \"new_root\"\r\n        });\r\n        \r\n        new_json.children = [node.copy()];\r\n  \r\n        \r\n  \r\n        let remove_me = node,\r\n          current_node = node_parent;\r\n        //   stashed_bl = ___namespace.noop();\r\n  \r\n       \r\n        var remove_idx;\r\n  \r\n        if (current_node.parent) {  \r\n  \r\n          new_json.children.push(current_node);\r\n  \r\n         while(current_node.parent) {\r\n            remove_idx = current_node.children.indexOf(remove_me);\r\n            if (current_node.parent.parent) {\r\n              current_node.children.splice(remove_idx, 1, current_node.parent);\r\n            } else {\r\n              current_node.children.splice(remove_idx, 1);\r\n            }\r\n  \r\n            remove_me = current_node;\r\n            current_node = current_node.parent;\r\n            \r\n          }\r\n          remove_idx = current_node.children.indexOf(remove_me);\r\n          current_node.children.splice(remove_idx, 1);\r\n        } else {\r\n          remove_idx = current_node.children.indexOf(remove_me);\r\n          current_node.children.splice(remove_idx, 1);\r\n          \r\n          remove_me = new_json;\r\n        }\r\n  \r\n        // current_node is now old root, and remove_me is the root child we came up\r\n        // the tree through\r\n        if (current_node.children.length === 1) {\r\n         \r\n          remove_me.children = remove_me.children.concat(current_node.children);\r\n        } \r\n        else {\r\n          let new_node = new d3__namespace.hierarchy({ name: \"\"});\r\n          ___namespace.extendOwn (new_json.children[0], new_json);\r\n          new_node.children = current_node.children.map(function(n) {\r\n            n.parent = new_node;\r\n            return n;\r\n          });\r\n          \r\n          new_node.parent = remove_me;\r\n          remove_me.children.push(new_node);  \r\n          \r\n        \r\n         }\r\n      //  console.log(remove_me)\r\n      }\r\n      \r\n       //  tree.update(new_json) \r\n      \r\n      const nodes = tree.getNodeByName(node.data.name)\r\n       console.log(nodes)\r\n      //  console.log(node)\r\n     \r\n      // tree.reroot(nodes, 1)\r\n      // if (tree.links.length===l) {\r\n         var newick2= tree.getNewick()\r\n        //  newick2.replace(\"__reroot_top_clade\",\"\");\r\n         tree = new phylotree(newick2.replace(\"__reroot_top_clade\",\"\"))\r\n        //  console.log(newick2.replace(\"__reroot_top_clade\",\"\"));\r\n        \r\n      //   }\r\n     \r\n    //    if(newick2.includes(\"__reroot_top_clade\")) {\r\n    //      newick2.replace(\"__reroot_top_clade\", \"\")\r\n        \r\n        \r\n    //   //   console.log(tree.getNewick())\r\n    // }\r\n       }\r\n  }\r\n\r\n  \r\n  console.log(tree)\r\n  \r\n    if(!props.skipPlacement ) {\r\n    placenodes(tree, props.internalNodeLabels, props.accessor, props.sort); \r\n  }\r\n  function attachTextWidth(node) {\r\n    node.data.text_width = text_width(node.data.name, 12, maxLabelWidth);\r\n    if(node.children) node.children.forEach(attachTextWidth);\r\n  }\r\n  attachTextWidth(tree.nodes);\r\n  const sorted_tips = tree.getTips().sort((a,b) => (\r\n      b.data.abstract_x - a.data.abstract_x\r\n    ));\r\n  var rightmost;\r\n \r\n    for(let i=0; i < sorted_tips.length; i++) {\r\n      let tip = sorted_tips[i];\r\n      rightmost = width - tip.data.text_width;\r\n      let scale = rightmost / tip.data.abstract_x;\r\n      let none_cross = sorted_tips.map(tip => {\r\n        const tip_x = tip.data.abstract_x * scale,\r\n          text_x = width - tip.data.text_width,\r\n          this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\r\n        return this_doesnt_cross;\r\n      }).every(x => x);\r\n      if(none_cross) break;\r\n   \r\n  }\r\n  const x_scale = scaleLinear()\r\n      .domain([0, tree.max_x])\r\n      .range([0, rightmost]),\r\n    y_scale = scaleLinear()\r\n      .domain([0, tree.max_y])\r\n      .range([props.includeBLAxis ? 60 : 0, height]),\r\n    color_scale = getColorScale(tree, props.highlightBranches);\r\n  \r\n\r\n  return (\r\n  <div class=\"row\" class= \"col-md-12\">\r\n    <SVG width={width+100} height={height+100} >\r\n   \r\n  \r\n  <g transform={props.transform}>\r\n  <defs></defs>\r\n    {/* {props.includeBLAxis ? <g>\r\n      <text\r\n        x={x_scale(tree.max_x/2)}\r\n        y={10}\r\n        alignmentBaseline='middle'\r\n        textAnchor='middle'\r\n        fontFamily='Courier'\r\n      >\r\n        Substitutions per site\r\n      </text>\r\n      <AxisTop\r\n        transform={`translate(0, 40)`}\r\n        scale={x_scale}\r\n      />\r\n    </g> : null } */}\r\n    \r\n    {tree.links.map(link => {\r\n      // const source_id = link.source.unique_id,\r\n      //   target_id = link.target.unique_id,\r\n      //   key = source_id + \",\" + target_id,\r\n      const  show_label = props.internalNodeLabels ||\r\n          (props.showLabels && tree.isLeafNode(link.target));\r\n      const  show_attribute = props.showAttributes;\r\n      const show_value1 = props.showValue1;\r\n      const show_value2 = props.showValue2;\r\n      const show_value3 = props.showValue3;\r\n      const show_value4 = props.showValue4;\r\n      const show_value5 = props.showValue5;\r\n      return(\r\n      <Branch\r\n        tree={tree}\r\n        \r\n        xScale={x_scale}\r\n        yScale={y_scale}\r\n        colorScale={color_scale}\r\n        link={link}\r\n        showLabel={show_label}\r\n        showAttribute={show_attribute}\r\n        showValue1={show_value1}\r\n        showValue2={show_value2}\r\n        showValue3={show_value3}\r\n        showValue4={show_value4}\r\n        showValue5={show_value5}\r\n        maxLabelWidth={maxLabelWidth}\r\n        width={width}\r\n        alignTips={props.alignTips}\r\n        branchStyler={props.branchStyler}\r\n        labelStyler={props.labelStyler}\r\n        tooltip={props.tooltip}\r\n        setTooltip={setTooltip}\r\n        setIsOpen={setIsOpen}\r\n        isOpen ={props.isOpen}\r\n      />\r\n     );\r\n    }) } \r\n    \r\n    { tooltip ? (<props.tooltip\r\n      width={props.width}\r\n      height={props.height}\r\n      {...tooltip}\r\n    />\r\n    ) : null }\r\n  </g>\r\n  </SVG>\r\n  <div ref={container}>\r\n  { isOpen ? (\r\n    <props.isOpen \r\n    {...isOpen}\r\n    />\r\n  ) : null}\r\n  </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nPhylotree.defaultProps = {\r\n  width: 500,\r\n  height: 500,\r\n  showLabels: true,\r\n  showAttributes: false,\r\n  showValue1: false,\r\n  showValue2: false,\r\n  showValue3: false,\r\n  showValue4: false,\r\n  showValue5: false,\r\n  skipPlacement: false,\r\n  maxLabelWidth: 20,\r\n  alignTips: \"right\",\r\n  accessor: default_accessor,\r\n  branchStyler: null,\r\n  labelStyler: null,\r\n  tooltip: null,\r\n  isOpen: null,\r\n  sort: null,\r\n  reroot: null,\r\n  includeBLAxis: true\r\n};\r\n\r\nexport default Phylotree;\r\nexport {\r\n  placenodes\r\n};\r\n"]},"metadata":{},"sourceType":"module"}